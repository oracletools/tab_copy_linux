<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2011 . All rights reserved.
     Author: AlexBuzunov@gmail.com (Alex Buzunov)
     Python Implementation of ETL pipeline
-->
<etldataflow name="24_TVU_DQ_TEST">
<globals>
	  <param name="ETLFLOW_DESCR" value="DQ test view."></param>

	<!-- PIPELINE execution type
		 SYNC - synchronous, ANYNC - asynchronous 
	-->
	  <param name="FLOW_TYPE" value="SYNC"></param>	  

	  <param name="FIELD_TERMINATOR" value="'|'"></param>
	  <param name="LINE_TERMINATOR" value="''"></param>
	  
	  <param name="DB_CONNECTOR" value="%PADB_DEPOT%"></param>
	  <param name="SCHEMA_NAME" value="PARACCEL"></param>
	   <!--will spool ALL records if LAME_DUCK=0-->
	  <param name="LAME_DUCK" value='0'></param>
	  <param name="ARRAYSIZE" value="5000"></param>
	  <param name="COPYCOMMIT" value="4"></param>
	  <!--sqlp attribute-->


	  <param name="TABLE_NAME1" value=" (SELECT * FROM TRD_VOL_UNION_900_mil) "></param>
	  <param name="TABLE_NAME" value="TRD_VOL_UNION_LARGE"></param>
	<param name="TVU_VIEW" value="TRD_VOL_UNION_VW1"></param>
	   		<param name="FO_VIEW" value="TRD_VOL_UNION_FO_VW1"></param>
			<param name="ESALES_VIEW" value="TRD_VOL_UNION_ESALES_VW1"></param>
			<param name="ASET_VIEW" value="TRD_VOL_UNION_ASET_VW1"></param>
				<param name="TVU_VIEW_1MO" value="TRD_VOL_UNION_VW1_1MO"></param>
	<param name="DQ_VIEW" value="TRD_VOL_UNION_DQ_VW1"></param>
</globals>

<worker name="25_TVU_CLEAR_CACHE">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Clear cache."></param>

      <sql_template>
       <![CDATA[
	   xpx 'toss_cache';
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker>

<worker1	 name="25_TVU_DQ_TEST_TVU_VW1">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Test DQ subquery."></param>
	<param name="TVU_LIMIT1" value="100000"></param>
	<param name="TABLE_NAME" value="TRD_VOL_UNION_900_mil"></param>
      <sql_template>
        <![CDATA[
select count(*)||'|cnt' cnt from %TVU_VIEW%;
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker1	>

<worker1	 name="25_TVU_DQ_TEST_TVU_VW1_1MO">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Test DQ 1MO subquery."></param>
	<param name="TVU_LIMIT1" value="100000"></param>
	<param name="TABLE_NAME" value="TRD_VOL_UNION_900_mil"></param>
      <sql_template>
        <![CDATA[
select count(*)||'|cnt' cnt from %TVU_VIEW_1MO%;
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker1>

<worker1 name="25_TVU_DQ_TEST_FO_VW1">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Test FO view."></param>
	<param name="TVU_LIMIT1" value="100000"></param>
	<param name="TABLE_NAME" value="TRD_VOL_UNION_900_mil"></param>
      <sql_template>
        <![CDATA[
select count(*)||'|cnt' cnt from %FO_VIEW%;
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker1>

<worker1 name="25_TVU_DQ_TEST_ESALES_VW1">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Test FO view."></param>
	<param name="TVU_LIMIT1" value="100000"></param>
	<param name="TABLE_NAME" value="TRD_VOL_UNION_900_mil"></param>
      <sql_template>
        <![CDATA[
select count(*)||'|cnt' cnt from %ESALES_VIEW%;
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker1>

<worker1 name="25_TVU_DQ_TEST_ASET_VW1">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Test ASET view."></param>
	<param name="TVU_LIMIT1" value="100000"></param>
	<param name="TABLE_NAME" value="TRD_VOL_UNION_900_mil"></param>
      <sql_template>
        <![CDATA[
select count(*)||'|cnt' cnt from %ASET_VIEW%;
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker1>

<worker name="25_TVU_DQ_TEST_DQ_VW1">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Test MAIN view."></param>
	<param name="TVU_LIMIT1" value="100000"></param>
	<param name="TABLE_NAME" value="TRD_VOL_UNION_900_mil"></param>
      <sql_template>
        <![CDATA[
select count(*)||'|cnt' cnt from %DQ_VIEW%;
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker>

<worker1 name="25_TVU_DQ_TEST_DQ_VIEW">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Test ASET view."></param>

	<param name="TABLE_NAME" value="TRD_VOL_UNION_900_mil"></param>
      <sql_template>
        <![CDATA[
drop view %DQ_VIEW%;
create view %DQ_VIEW% as		
SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )     AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        DRLDWN_CPK6,
        DRLDWN_CPK7,
        NULL DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES'              AS DQCHK_GEN_VAL1,
            'COUNTERPARTY'             AS DQCHK_GEN_VAL2,
            'COUNTERPARTY_NAME'        AS DQCHK_GEN_VAL3,
            PRODUCT                    AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS               AS DQCHK_GEN_VAL5,
            SUM(CTP_ESALES_ACCNAM_CNT) AS DRLDWN_CPK1,
            SUM(TOTAL_CNT)             AS DRLDWN_CPK2,
            SRC_FILE_CD                AS DRLDWN_CPK3,
            COB_DT                     AS DRLDWN_CPK4,
            CTP_ESALES_ACCNAM_VAL      AS DRLDWN_CPK5,
            NULL                       AS DRLDWN_CPK6,
            NULL                       AS DRLDWN_CPK7
        FROM TRD_VOL_UNION_ESALES_VW1
        GROUP BY PRODUCT,
            FEED_SRC_SYS ,
            SRC_FILE_CD ,
            COB_DT ,
            CTP_ESALES_ACCNAM_VAL
        )
    UNION ALL
    SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )    AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        DRLDWN_CPK6,
        DRLDWN_CPK7,
        NULL DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES'             AS DQCHK_GEN_VAL1,
            'COUNTERPARTY'            AS DQCHK_GEN_VAL2,
            'ESALES_MG_NAME'          AS DQCHK_GEN_VAL3,
            PRODUCT                   AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS              AS DQCHK_GEN_VAL5,
            SUM(CTP_ESALES_MGNAM_CNT) AS DRLDWN_CPK1,
            SUM(TOTAL_CNT)            AS DRLDWN_CPK2,
            SRC_FILE_CD               AS DRLDWN_CPK3,
            COB_DT                    AS DRLDWN_CPK4,
            CTP_ESALES_MGNAM_VAL      AS DRLDWN_CPK5,
            CTP_ACCT_NO               AS DRLDWN_CPK6,
            CTP_NAM                   AS DRLDWN_CPK7
        FROM TRD_VOL_UNION_ESALES_VW1
        GROUP BY PRODUCT,
            FEED_SRC_SYS ,
            SRC_FILE_CD ,
            COB_DT ,
            CTP_ESALES_MGNAM_VAL,
            CTP_ACCT_NO,
            CTP_NAM
        )
    UNION ALL
    SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )    AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        DRLDWN_CPK6,
        DRLDWN_CPK7,
        NULL DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES'             AS DQCHK_GEN_VAL1,
            'COUNTERPARTY'            AS DQCHK_GEN_VAL2,
            'ESALES_NAME'             AS DQCHK_GEN_VAL3,
            PRODUCT                   AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS              AS DQCHK_GEN_VAL5,
            SUM(CTP_ESALES_GPNAM_CNT) AS DRLDWN_CPK1,
            SUM(TOTAL_CNT)            AS DRLDWN_CPK2,
            SRC_FILE_CD               AS DRLDWN_CPK3,
            COB_DT                    AS DRLDWN_CPK4,
            CTP_ESALES_GPNAM_VAL      AS DRLDWN_CPK5,
            CTP_ACCT_NO               AS DRLDWN_CPK6,
            CTP_NAM                   AS DRLDWN_CPK7
        FROM TRD_VOL_UNION_ESALES_VW1
        GROUP BY PRODUCT,
            FEED_SRC_SYS ,
            SRC_FILE_CD ,
            COB_DT ,
            CTP_ESALES_GPNAM_VAL,
            CTP_ACCT_NO,
            CTP_NAM
        )
    UNION ALL
    SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )    AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        DRLDWN_CPK6,
        DRLDWN_CPK7,
        NULL DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES'            AS DQCHK_GEN_VAL1,
            'COUNTERPARTY'           AS DQCHK_GEN_VAL2,
            'COUNTERPARTY_UNIQUE_ID' AS DQCHK_GEN_VAL3,
            PRODUCT                  AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS             AS DQCHK_GEN_VAL5,
            SUM(
            CASE
                WHEN CTP_UID_FAIL_IND = 1
                THEN rec_cnt
                ELSE 0
            END )        AS DRLDWN_CPK1,
            SUM(rec_cnt) AS DRLDWN_CPK2,
            SRC_FILE_CD  AS DRLDWN_CPK3,
            COB_DT       AS DRLDWN_CPK4,
            CASE
                WHEN CTP_UID_FAIL_IND = 1
                THEN CTP_UID_VAL
            END AS DRLDWN_CPK5,
            CASE
                WHEN CTP_UID_FAIL_IND = 1
                THEN CTP_ACCT_NO
            END AS DRLDWN_CPK6,
            CASE
                WHEN CTP_UID_FAIL_IND = 1
                THEN CTP_NAM
            END AS DRLDWN_CPK7
        FROM TRD_VOL_UNION_VW1
        GROUP BY PRODUCT,
            FEED_SRC_SYS ,
            SRC_FILE_CD ,
            COB_DT ,
            CASE
                WHEN CTP_UID_FAIL_IND = 1
                THEN CTP_UID_VAL
            END ,
            CASE
                WHEN CTP_UID_FAIL_IND = 1
                THEN CTP_ACCT_NO
            END ,
            CASE
                WHEN CTP_UID_FAIL_IND = 1
                THEN CTP_NAM
            END
        )
    UNION ALL
    SELECT SUM(CTP_CPI_FAIL_CNT) over (partition BY FEED_SRC_SYS ) AS DQCHK_VAL,
        SUM(TOTAL_CNT) over (partition BY FEED_SRC_SYS )           AS DQCHK_TOT,
        'VOLUMES'                                                  AS DQCHK_GEN_VAL1,
        'COUNTERPARTY'                                             AS DQCHK_GEN_VAL2,
        'CPI_NAME'                                                 AS DQCHK_GEN_VAL3,
        PRODUCT                                                    AS DQCHK_GEN_VAL4,
        FEED_SRC_SYS                                               AS DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        CTP_CPI_FAIL_CNT AS DRLDWN_CPK1,
        TOTAL_CNT        AS DRLDWN_CPK2,
        SRC_FILE_CD      AS DRLDWN_CPK3,
        COB_DT           AS DRLDWN_CPK4,
        CTP_CPI_FAIL_VAL AS DRLDWN_CPK5,
        CTP_ACCT_NO      AS DRLDWN_CPK6,
        CTP_NAM          AS DRLDWN_CPK7,
        CTP_CPI_ACCT_NO  AS DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT SUM(REC_CNT) AS TOTAL_CNT,
            SUM (
            CASE
                WHEN (CTP_CPI_FAIL_IND = 1
                 OR COUNTERPARTY_NAME IS NULL)
                AND CTP_UID_FAIL_IND   = 0
                THEN REC_CNT
                ELSE 0
            END )AS CTP_CPI_FAIL_CNT,
            CASE
                WHEN (CTP_CPI_FAIL_IND = 1
                 OR COUNTERPARTY_NAME IS NULL)
                AND CTP_UID_FAIL_IND   = 0
                THEN CTP_UID_VAL
            END AS CTP_CPI_FAIL_VAL,
            PRODUCT,
            FEED_SRC_SYS,
            SRC_FILE_CD,
            COB_DT,
            CASE
                WHEN (CTP_CPI_FAIL_IND = 1
                 OR COUNTERPARTY_NAME IS NULL)
                AND CTP_UID_FAIL_IND   = 0
                THEN CTP_ACCT_NO
            END AS CTP_ACCT_NO,
            CASE
                WHEN (CTP_CPI_FAIL_IND = 1
                 OR COUNTERPARTY_NAME IS NULL)
                AND CTP_UID_FAIL_IND   = 0
                THEN CTP_NAM
            END AS CTP_NAM,
            CASE
                WHEN (CTP_CPI_FAIL_IND = 1
                 OR COUNTERPARTY_NAME IS NULL)
                AND CTP_UID_FAIL_IND   = 0
                THEN CTP_CPI_ACCT_NO
            END AS CTP_CPI_ACCT_NO
        FROM TRD_VOL_UNION_VW1,
            (SELECT
                CASE
                    WHEN (TRIM(REF_CPI.COUNTERPARTY_NAME)= ''
                     OR upper(REF_CPI.COUNTERPARTY_NAME) = 'NULL'
                     OR upper(REF_CPI.COUNTERPARTY_NAME) = 'UNALLOCATED'
                     OR REF_CPI.COUNTERPARTY_NAME       IS NULL)
                    THEN 1
                    ELSE 0
                END AS CTP_CPI_FAIL_IND,
                COUNTERPARTY_NAME,
                COUNTERPARTY_ID
            FROM REF_CPI
            ) REF_CPI
        WHERE ( REF_CPI.COUNTERPARTY_ID(+)                =TRD_VOL_UNION_VW1.CTP_CPI_ACCT_NO )
        AND ( REF_CPI.COUNTERPARTY_ID(+)                  =TRD_VOL_UNION_VW1.CTP_UID_GRD )
        AND ( upper(trim(TRD_VOL_UNION_VW1.FEED_SRC_SYS) )='RADAR'
         OR upper(trim(TRD_VOL_UNION_VW1.SRC_FILE_CD))    ='TMLSMB' )
        GROUP BY
            CASE
                WHEN (CTP_CPI_FAIL_IND = 1
                 OR COUNTERPARTY_NAME IS NULL)
                AND CTP_UID_FAIL_IND   = 0
                THEN CTP_UID_VAL
            END ,
            PRODUCT,
            FEED_SRC_SYS,
            SRC_FILE_CD,
            COB_DT,
            CASE
                WHEN (CTP_CPI_FAIL_IND = 1
                 OR COUNTERPARTY_NAME IS NULL)
                AND CTP_UID_FAIL_IND   = 0
                THEN CTP_ACCT_NO
            END ,
            CASE
                WHEN (CTP_CPI_FAIL_IND = 1
                 OR COUNTERPARTY_NAME IS NULL)
                AND CTP_UID_FAIL_IND   = 0
                THEN CTP_NAM
            END ,
            CASE
                WHEN (CTP_CPI_FAIL_IND = 1
                 OR COUNTERPARTY_NAME IS NULL)
                AND CTP_UID_FAIL_IND   = 0
                THEN CTP_CPI_ACCT_NO
            END
        )
    UNION ALL
    SELECT SUM(CTP_GFCID_GRD_FAIL_CNT) over (partition BY FEED_SRC_SYS ) AS DQCHK_VAL,
        SUM(TOTAL_CNT) over (partition BY FEED_SRC_SYS )                 AS DQCHK_TOT,
        'VOLUMES'                                                        AS DQCHK_GEN_VAL1,
        'COUNTERPARTY'                                                   AS DQCHK_GEN_VAL2,
        'CDMS_NAME'                                                      AS DQCHK_GEN_VAL3,
        PRODUCT                                                          AS DQCHK_GEN_VAL4,
        FEED_SRC_SYS                                                     AS DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        CTP_GFCID_GRD_FAIL_CNT AS DRLDWN_CPK1,
        TOTAL_CNT              AS DRLDWN_CPK2,
        SRC_FILE_CD            AS DRLDWN_CPK3,
        COB_DT                 AS DRLDWN_CPK4,
        CTP_GFCID_GRD_FAIL_VAL AS DRLDWN_CPK5,
        CTP_ACCT_NO            AS DRLDWN_CPK6,
        CTP_NAM                AS DRLDWN_CPK7,
        NULL                   AS DRLDWN_CPK8,
        CTP_GFCID_GRD          AS DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT SUM(REC_CNT) AS TOTAL_CNT,
            SUM (
            CASE
                WHEN (CTP_CDMS_FAIL_IND    = 1
                 OR CUST_NAM              IS NULL)
                AND CTP_GFCID_GRD_FAIL_IND = 0
                THEN REC_CNT
                ELSE 0
            END )AS CTP_GFCID_GRD_FAIL_CNT,
            CASE
                WHEN (CTP_CDMS_FAIL_IND    = 1
                 OR CUST_NAM              IS NULL)
                AND CTP_GFCID_GRD_FAIL_IND = 0
                THEN CTP_GFCID_GRD_FAIL_VAL
            END AS CTP_GFCID_GRD_FAIL_VAL,
            PRODUCT,
            FEED_SRC_SYS,
            SRC_FILE_CD,
            COB_DT,
            CASE
                WHEN (CTP_CDMS_FAIL_IND    = 1
                 OR CUST_NAM              IS NULL)
                AND CTP_GFCID_GRD_FAIL_IND = 0
                THEN CTP_ACCT_NO
            END AS CTP_ACCT_NO,
            CASE
                WHEN (CTP_CDMS_FAIL_IND    = 1
                 OR CUST_NAM              IS NULL)
                AND CTP_GFCID_GRD_FAIL_IND = 0
                THEN CTP_NAM
            END AS CTP_NAM,
            CASE
                WHEN (CTP_CDMS_FAIL_IND    = 1
                 OR CUST_NAM              IS NULL)
                AND CTP_GFCID_GRD_FAIL_IND = 0
                THEN CTP_GFCID_GRD
            END AS CTP_GFCID_GRD
        FROM TRD_VOL_UNION_VW1,
            (SELECT
                CASE
                    WHEN (trim(REF_CDMS.CUST_NAM) =''
                     OR upper(REF_CDMS.CUST_NAM)  ='NULL'
                     OR upper(REF_CDMS.CUST_NAM)  ='UNALLOCATED'
                     OR REF_CDMS.CUST_NAM        IS NULL)
                    THEN 1
                    ELSE 0
                END AS CTP_CDMS_FAIL_IND,
                CUST_NAM,
                GFCID
            FROM REF_CDMS
            ) REF_CDMS
        WHERE ( REF_CDMS.GFCID(+)       =TRD_VOL_UNION_VW1.CTP_GFCID_GRD )
        AND ( upper(trim(FEED_SRC_SYS) )='DEPOTTRACS'
         OR upper(trim(FEED_SRC_SYS) )  ='FLEXCUBELOANS'
         OR upper(trim(FEED_SRC_SYS) )  ='OPICS CA'
         OR upper(trim(FEED_SRC_SYS) )  ='OPICS NY')
        GROUP BY
            CASE
                WHEN (CTP_CDMS_FAIL_IND    = 1
                 OR CUST_NAM              IS NULL)
                AND CTP_GFCID_GRD_FAIL_IND = 0
                THEN CTP_GFCID_GRD_FAIL_VAL
            END ,
            PRODUCT,
            FEED_SRC_SYS,
            SRC_FILE_CD,
            COB_DT,
            CASE
                WHEN (CTP_CDMS_FAIL_IND    = 1
                 OR CUST_NAM              IS NULL)
                AND CTP_GFCID_GRD_FAIL_IND = 0
                THEN CTP_ACCT_NO
            END ,
            CASE
                WHEN (CTP_CDMS_FAIL_IND    = 1
                 OR CUST_NAM              IS NULL)
                AND CTP_GFCID_GRD_FAIL_IND = 0
                THEN CTP_NAM
            END,
            CASE
                WHEN (CTP_CDMS_FAIL_IND    = 1
                 OR CUST_NAM              IS NULL)
                AND CTP_GFCID_GRD_FAIL_IND = 0
                THEN CTP_GFCID_GRD
            END
        )
    UNION ALL
    SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )    AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        NULL DRLDWN_CPK6,
        NULL DRLDWN_CPK7,
        NULL DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES'            AS DQCHK_GEN_VAL1,
            'FRONT_OFFICE'           AS DQCHK_GEN_VAL2,
            'FO_GOC_REGION'          AS DQCHK_GEN_VAL3,
            PRODUCT                  AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS             AS DQCHK_GEN_VAL5,
            SUM(FO_GOC_RGN_FAIL_CNT) AS DRLDWN_CPK1,
            SUM(TOTAL_CNT)           AS DRLDWN_CPK2,
            SRC_FILE_CD              AS DRLDWN_CPK3,
            COB_DT                   AS DRLDWN_CPK4,
            FO_GOC_RGN_FAIL_VAL      AS DRLDWN_CPK5
        FROM TRD_VOL_UNION_FO_VW1
        GROUP BY PRODUCT,
            FEED_SRC_SYS ,
            SRC_FILE_CD ,
            COB_DT ,
            FO_GOC_RGN_FAIL_VAL
        )
    UNION ALL
    SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )    AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        NULL DRLDWN_CPK6,
        NULL DRLDWN_CPK7,
        NULL DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES'              AS DQCHK_GEN_VAL1,
            'FRONT_OFFICE'             AS DQCHK_GEN_VAL2,
            'FO_GOC_DESCRIPTION'       AS DQCHK_GEN_VAL3,
            PRODUCT                    AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS               AS DQCHK_GEN_VAL5,
            SUM(FO_GOC_DESCR_FAIL_CNT) AS DRLDWN_CPK1,
            SUM(TOTAL_CNT)             AS DRLDWN_CPK2,
            SRC_FILE_CD                AS DRLDWN_CPK3,
            COB_DT                     AS DRLDWN_CPK4,
            FO_GOC_DESCR_FAIL_VAL      AS DRLDWN_CPK5
        FROM TRD_VOL_UNION_FO_VW1
        GROUP BY PRODUCT,
            FEED_SRC_SYS ,
            SRC_FILE_CD ,
            COB_DT ,
            FO_GOC_DESCR_FAIL_VAL
        )
    UNION ALL
    SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )    AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        DRLDWN_CPK6,
        DRLDWN_CPK7,
        NULL DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES'  AS DQCHK_GEN_VAL1,
            'FRONT_OFFICE' AS DQCHK_GEN_VAL2,
            'FO_KEY'       AS DQCHK_GEN_VAL3,
            PRODUCT        AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS   AS DQCHK_GEN_VAL5,
            SUM(
            CASE
                WHEN FO_GOC_FAIL_IND = 1
                THEN rec_cnt
                ELSE 0
            END )        AS DRLDWN_CPK1,
            SUM(rec_cnt) AS DRLDWN_CPK2,
            SRC_FILE_CD  AS DRLDWN_CPK3,
            COB_DT       AS DRLDWN_CPK4,
            CASE
                WHEN FO_GOC_FAIL_IND = 1
                THEN FO_GOC_FAIL_VAL
            END AS DRLDWN_CPK5,
            CASE
                WHEN FO_GOC_FAIL_IND = 1
                THEN FIRM_ACCT_NO
            END AS DRLDWN_CPK6,
            CASE
                WHEN FO_GOC_FAIL_IND = 1
                THEN EXPN_CD
            END AS DRLDWN_CPK7
        FROM TRD_VOL_UNION_VW1
        GROUP BY PRODUCT,
            FEED_SRC_SYS ,
            SRC_FILE_CD ,
            COB_DT ,
            CASE
                WHEN FO_GOC_FAIL_IND = 1
                THEN FO_GOC_FAIL_VAL
            END ,
            CASE
                WHEN FO_GOC_FAIL_IND = 1
                THEN FIRM_ACCT_NO
            END ,
            CASE
                WHEN FO_GOC_FAIL_IND = 1
                THEN EXPN_CD
            END
        )
    UNION ALL
    SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )    AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        NULL DRLDWN_CPK6,
        NULL DRLDWN_CPK7,
        NULL DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES'  AS DQCHK_GEN_VAL1,
            'MOS'          AS DQCHK_GEN_VAL2,
            'ACTL_MOS_KEY' AS DQCHK_GEN_VAL3,
            PRODUCT        AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS   AS DQCHK_GEN_VAL5,
            SUM(
            CASE
                WHEN ACTL_MOS_FAIL_IND = 1
                THEN rec_cnt
                ELSE 0
            END )        AS DRLDWN_CPK1,
            SUM(rec_cnt) AS DRLDWN_CPK2,
            SRC_FILE_CD  AS DRLDWN_CPK3,
            COB_DT       AS DRLDWN_CPK4,
            CASE
                WHEN ACTL_MOS_FAIL_IND = 1
                THEN ACTL_MOS_FAIL_VAL
            END AS DRLDWN_CPK5
        FROM TRD_VOL_UNION_VW1
        WHERE FEED_SRC_SYS <>'FLEXCUBELOANS'
        GROUP BY PRODUCT,
            FEED_SRC_SYS ,
            SRC_FILE_CD ,
            COB_DT ,
            CASE
                WHEN ACTL_MOS_FAIL_IND = 1
                THEN ACTL_MOS_FAIL_VAL
            END
        )
    UNION ALL
    SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )    AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        CUSIP DRLDWN_CPK6,
        ISIN DRLDWN_CPK7,
        SEDOL DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES' AS DQCHK_GEN_VAL1,
            'MOS'         AS DQCHK_GEN_VAL2,
            'MOS_KEY'     AS DQCHK_GEN_VAL3,
            PRODUCT       AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS  AS DQCHK_GEN_VAL5,
            SUM(
            CASE
                WHEN MOS_FAIL_IND = 1
                THEN rec_cnt
                ELSE 0
            END )        AS DRLDWN_CPK1,
            SUM(rec_cnt) AS DRLDWN_CPK2,
            SRC_FILE_CD  AS DRLDWN_CPK3,
            COB_DT       AS DRLDWN_CPK4,
            CASE
                WHEN MOS_FAIL_IND = 1
                THEN MOS_FAIL_VAL
            END AS DRLDWN_CPK5,
            CASE
                WHEN MOS_FAIL_IND = 1
                THEN CUSIP
            END AS CUSIP,
            CASE
                WHEN MOS_FAIL_IND = 1
                THEN ISIN
            END AS ISIN,
            CASE
                WHEN MOS_FAIL_IND = 1
                THEN SEDOL
            END AS SEDOL
        FROM TRD_VOL_UNION_VW1
        WHERE FEED_SRC_SYS <>'FLEXCUBELOANS'
        GROUP BY PRODUCT,
            FEED_SRC_SYS ,
            SRC_FILE_CD ,
            COB_DT ,
            CASE
                WHEN MOS_FAIL_IND = 1
                THEN MOS_FAIL_VAL
            END ,
            CASE
                WHEN MOS_FAIL_IND = 1
                THEN CUSIP
            END ,
            CASE
                WHEN MOS_FAIL_IND = 1
                THEN ISIN
            END ,
            CASE
                WHEN MOS_FAIL_IND = 1
                THEN SEDOL
            END
        )
    UNION ALL
    SELECT SUM(ACTL_MOS_FAIL_CNT) over (partition BY FEED_SRC_SYS ) AS DQCHK_VAL,
        SUM(TOTAL_CNT) over (partition BY FEED_SRC_SYS )            AS DQCHK_TOT,
        'VOLUMES'                                                   AS DQCHK_GEN_VAL1,
        'MOS'                                                       AS DQCHK_GEN_VAL2,
        'ACTL_MOS_RGN'                                              AS DQCHK_GEN_VAL3,
        PRODUCT                                                     AS DQCHK_GEN_VAL4,
        FEED_SRC_SYS                                                AS DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        ACTL_MOS_FAIL_CNT AS DRLDWN_CPK1,
        TOTAL_CNT         AS DRLDWN_CPK2,
        SRC_FILE_CD       AS DRLDWN_CPK3,
        COB_DT            AS DRLDWN_CPK4,
        ACTL_MOS_FAIL_VAL AS DRLDWN_CPK5,
        NULL DRLDWN_CPK6,
        NULL DRLDWN_CPK7,
        NULL DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT SUM(REC_CNT) AS TOTAL_CNT,
            SUM (
            CASE
                WHEN (ACTL_MOS_RGN_FAIL_IND = 1
                 OR RGN                    IS NULL)
                AND ACTL_MOS_FAIL_IND       = 0
                THEN REC_CNT
                ELSE 0
            END )AS ACTL_MOS_FAIL_CNT,
            CASE
                WHEN (ACTL_MOS_RGN_FAIL_IND = 1
                 OR RGN                    IS NULL)
                AND ACTL_MOS_FAIL_IND       = 0
                THEN ACTL_MOS_FAIL_VAL
            END AS ACTL_MOS_FAIL_VAL,
            PRODUCT,
            FEED_SRC_SYS,
            SRC_FILE_CD,
            COB_DT
        FROM TRD_VOL_UNION_VW1,
            (SELECT
                CASE
                    WHEN (TRIM( MAN_REF_MKT_OF_SETL.RGN) =''
                     OR upper(MAN_REF_MKT_OF_SETL.RGN)   ='NULL'
                     OR upper(MAN_REF_MKT_OF_SETL.RGN)   ='UNALLOCATED'
                     OR MAN_REF_MKT_OF_SETL.RGN         IS NULL )
                    THEN 1
                    ELSE 0
                END AS ACTL_MOS_RGN_FAIL_IND,
                RGN,
                FIN_INSM_KEY
            FROM MAN_REF_MKT_OF_SETL
            ) MAN_ACT_MKT_OF_SET
        WHERE (MAN_ACT_MKT_OF_SET.FIN_INSM_KEY(+) =TRD_VOL_UNION_VW1.ACTL_MKT_OF_SETL_CD )
        AND FEED_SRC_SYS                         <>'FLEXCUBELOANS'
        GROUP BY
            CASE
                WHEN (ACTL_MOS_RGN_FAIL_IND = 1
                 OR RGN                    IS NULL)
                AND ACTL_MOS_FAIL_IND       = 0
                THEN ACTL_MOS_FAIL_VAL
            END ,
            PRODUCT,
            FEED_SRC_SYS,
            SRC_FILE_CD,
            COB_DT
        )
    UNION ALL
    SELECT SUM(MOS_FAIL_CNT) over (partition BY FEED_SRC_SYS ) AS DQCHK_VAL,
        SUM(TOTAL_CNT) over (partition BY FEED_SRC_SYS )       AS DQCHK_TOT,
        'VOLUMES'                                              AS DQCHK_GEN_VAL1,
        'MOS'                                                  AS DQCHK_GEN_VAL2,
        'MOS_RGN'                                              AS DQCHK_GEN_VAL3,
        PRODUCT                                                AS DQCHK_GEN_VAL4,
        FEED_SRC_SYS                                           AS DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        MOS_FAIL_CNT AS DRLDWN_CPK1,
        TOTAL_CNT    AS DRLDWN_CPK2,
        SRC_FILE_CD  AS DRLDWN_CPK3,
        COB_DT       AS DRLDWN_CPK4,
        MOS_FAIL_VAL AS DRLDWN_CPK5,
        NULL DRLDWN_CPK6,
        NULL DRLDWN_CPK7,
        NULL DRLDWN_CPK8,
        NULL DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT SUM(REC_CNT) AS TOTAL_CNT,
            SUM (
            CASE
                WHEN (MOS_RGN_FAIL_IND = 1
                 OR RGN               IS NULL)
                AND MOS_FAIL_IND       = 0
                THEN REC_CNT
                ELSE 0
            END )AS MOS_FAIL_CNT,
            CASE
                WHEN (MOS_RGN_FAIL_IND = 1
                 OR RGN               IS NULL)
                AND MOS_FAIL_IND       = 0
                THEN MOS_FAIL_VAL
            END AS MOS_FAIL_VAL,
            PRODUCT,
            FEED_SRC_SYS,
            SRC_FILE_CD,
            COB_DT
        FROM TRD_VOL_UNION_VW1,
            (SELECT
                CASE
                    WHEN (TRIM( MAN_REF_MKT_OF_SETL.RGN) =''
                     OR upper(MAN_REF_MKT_OF_SETL.RGN)   ='NULL'
                     OR upper(MAN_REF_MKT_OF_SETL.RGN)   ='UNALLOCATED'
                     OR MAN_REF_MKT_OF_SETL.RGN         IS NULL )
                    THEN 1
                    ELSE 0
                END AS MOS_RGN_FAIL_IND,
                RGN,
                FIN_INSM_KEY
            FROM MAN_REF_MKT_OF_SETL
            ) MAN_ACT_MKT_OF_SET
        WHERE (MAN_ACT_MKT_OF_SET.FIN_INSM_KEY(+) =TRD_VOL_UNION_VW1.MKT_OF_SETL_CD )
        AND FEED_SRC_SYS                         <>'FLEXCUBELOANS'
        GROUP BY
            CASE
                WHEN (MOS_RGN_FAIL_IND = 1
                 OR RGN               IS NULL)
                AND MOS_FAIL_IND       = 0
                THEN MOS_FAIL_VAL
            END ,
            PRODUCT,
            FEED_SRC_SYS,
            SRC_FILE_CD,
            COB_DT
        )
    UNION ALL
    SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )    AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        DRLDWN_CPK6,
        DRLDWN_CPK7,
        DRLDWN_CPK8,
        DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES'     AS DQCHK_GEN_VAL1,
            'ASSET_CLASS'     AS DQCHK_GEN_VAL2,
            'ASSET_LEVEL_KEY' AS DQCHK_GEN_VAL3,
            PRODUCT           AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS      AS DQCHK_GEN_VAL5,
            SUM(ALK_FAIL_CNT) AS DRLDWN_CPK1,
            SUM(TOTAL_CNT)    AS DRLDWN_CPK2,
            SRC_FILE_CD       AS DRLDWN_CPK3,
            COB_DT            AS DRLDWN_CPK4,
            ALK_FAIL_VAL      AS DRLDWN_CPK5,
            CUSIP             AS DRLDWN_CPK6,
            ISIN              AS DRLDWN_CPK7,
            SEDOL             AS DRLDWN_CPK8,
            ASET_LVL_ONE_DESC AS DRLDWN_CPK9
        FROM TRD_VOL_UNION_ASET_VW1
        GROUP BY FEED_SRC_SYS ,
            PRODUCT,
            SRC_FILE_CD ,
            COB_DT ,
            ALK_FAIL_VAL,
            CUSIP,
            ISIN,
            SEDOL,
            ASET_LVL_ONE_DESC
        )
    UNION ALL
    SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )    AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        DRLDWN_CPK6,
        DRLDWN_CPK7,
        DRLDWN_CPK8,
        DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES'     AS DQCHK_GEN_VAL1,
            'ASSET_CLASS'     AS DQCHK_GEN_VAL2,
            'ASSET_LEVEL_0'   AS DQCHK_GEN_VAL3,
            PRODUCT           AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS      AS DQCHK_GEN_VAL5,
            SUM(AL0_FAIL_CNT) AS DRLDWN_CPK1,
            SUM(TOTAL_CNT)    AS DRLDWN_CPK2,
            SRC_FILE_CD       AS DRLDWN_CPK3,
            COB_DT            AS DRLDWN_CPK4,
            AL0_FAIL_VAL      AS DRLDWN_CPK5,
            NULL              AS DRLDWN_CPK6,
            NULL              AS DRLDWN_CPK7,
            NULL              AS DRLDWN_CPK8,
            NULL              AS DRLDWN_CPK9
        FROM TRD_VOL_UNION_ASET_VW1
        GROUP BY FEED_SRC_SYS ,
            PRODUCT,
            SRC_FILE_CD ,
            COB_DT ,
            AL0_FAIL_VAL
        )
    UNION ALL
    SELECT SUM(DRLDWN_CPK1) over (partition BY DQCHK_GEN_VAL5 ) AS DQCHK_VAL,
        SUM(DRLDWN_CPK2) over (partition BY DQCHK_GEN_VAL5 )    AS DQCHK_TOT,
        DQCHK_GEN_VAL1,
        DQCHK_GEN_VAL2,
        DQCHK_GEN_VAL3,
        DQCHK_GEN_VAL4,
        DQCHK_GEN_VAL5,
        NULL DQCHK_GEN_VAL6,
        NULL DQCHK_GEN_VAL7,
        NULL DQCHK_GEN_VAL8,
        NULL DQCHK_GEN_VAL9,
        NULL DQCHK_GEN_VAL10,
        DRLDWN_CPK1,
        DRLDWN_CPK2,
        DRLDWN_CPK3,
        DRLDWN_CPK4,
        DRLDWN_CPK5,
        DRLDWN_CPK6,
        DRLDWN_CPK7,
        DRLDWN_CPK8,
        DRLDWN_CPK9,
        NULL DRLDWN_CPK10
    FROM
        (SELECT 'VOLUMES'     AS DQCHK_GEN_VAL1,
            'ASSET_CLASS'     AS DQCHK_GEN_VAL2,
            'ASSET_LEVEL_1'   AS DQCHK_GEN_VAL3,
            PRODUCT           AS DQCHK_GEN_VAL4,
            FEED_SRC_SYS      AS DQCHK_GEN_VAL5,
            SUM(AL1_FAIL_CNT) AS DRLDWN_CPK1,
            SUM(TOTAL_CNT)    AS DRLDWN_CPK2,
            SRC_FILE_CD       AS DRLDWN_CPK3,
            COB_DT            AS DRLDWN_CPK4,
            AL1_FAIL_VAL      AS DRLDWN_CPK5,
            NULL              AS DRLDWN_CPK6,
            NULL              AS DRLDWN_CPK7,
            NULL              AS DRLDWN_CPK8,
            NULL              AS DRLDWN_CPK9
        FROM TRD_VOL_UNION_ASET_VW1
        GROUP BY FEED_SRC_SYS ,
            PRODUCT,
            SRC_FILE_CD ,
            COB_DT ,
            AL1_FAIL_VAL
        );
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker1>


<worker1 name="25_TVU_CREATE_ASET_VW1">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Create view TRD_VOL_UNION_ASET_VW1."></param>

	<param name="TABLE_NAME" value="TRD_VOL_UNION_900_mil"></param>
      <sql_template>
        <![CDATA[
drop view %ASET_VIEW%;
create view %ASET_VIEW% as
SELECT REC_CNT AS TOTAL_CNT,
        CASE
            WHEN ASET_LVL_KEY_FAIL_IND = 1
            THEN REC_CNT
            ELSE 0
        END AS ALK_FAIL_CNT,
        CASE
            WHEN (AL0DESC_FAIL_IND    = 1
             OR ASET_LVL_0_DESC      IS NULL)
            AND ASET_LVL_KEY_FAIL_IND = 0
            THEN REC_CNT
            ELSE 0
        END AS AL0_FAIL_CNT,
        CASE
            WHEN (AL1DESC_FAIL_IND    = 1
             OR ASET_LVL_1_DESC      IS NULL)
            AND ASET_LVL_KEY_FAIL_IND = 0
            THEN REC_CNT
            ELSE 0
        END AS AL1_FAIL_CNT,
        CASE
            WHEN ASET_LVL_KEY_FAIL_IND = 1
            THEN ASET_LVL_KEY_FAIL_VAL
        END AS ALK_FAIL_VAL,
        CASE
            WHEN (AL0DESC_FAIL_IND    = 1
             OR ASET_LVL_0_DESC      IS NULL)
            AND ASET_LVL_KEY_FAIL_IND = 0
            THEN ASET_LVL_KEY_FAIL_VAL
        END AS AL0_FAIL_VAL,
        CASE
            WHEN (AL1DESC_FAIL_IND    = 1
             OR ASET_LVL_1_DESC      IS NULL)
            AND ASET_LVL_KEY_FAIL_IND = 0
            THEN ASET_LVL_KEY_FAIL_VAL
        END AS AL1_FAIL_VAL,
        FEED_SRC_SYS,
        SRC_FILE_CD,
        CASE
            WHEN (ASET_LVL_KEY_FAIL_IND = 1)
            THEN COB_DT
        END AS COB_DT,
        CASE
            WHEN (ASET_LVL_KEY_FAIL_IND = 1)
            THEN CUSIP
        END AS CUSIP,
        CASE
            WHEN (ASET_LVL_KEY_FAIL_IND = 1)
            THEN ISIN
        END AS ISIN,
        CASE
            WHEN (ASET_LVL_KEY_FAIL_IND = 1)
            THEN SEDOL
        END AS SEDOL,
        CASE
            WHEN (ASET_LVL_KEY_FAIL_IND = 1)
            THEN ASET_LVL_ONE_DESC
        END AS ASET_LVL_ONE_DESC,
        PRODUCT
    FROM TRD_VOL_UNION_VW1,
        (SELECT
            CASE
                WHEN (trim(MAN_REF_ASET_LVL_DATA.ASET_LVL_0_DESC)=''
                 OR UPPER(MAN_REF_ASET_LVL_DATA.ASET_LVL_0_DESC) ='UNALLOCATED'
                 OR MAN_REF_ASET_LVL_DATA.ASET_LVL_0_DESC       IS NULL
                 OR UPPER(MAN_REF_ASET_LVL_DATA.ASET_LVL_0_DESC) ='NULL')
                THEN 1
                ELSE 0
            END AS AL0DESC_FAIL_IND,
            CASE
                WHEN (TRIM(MAN_REF_ASET_LVL_DATA.ASET_LVL_1_DESC)=''
                 OR UPPER(MAN_REF_ASET_LVL_DATA.ASET_LVL_1_DESC) ='UNALLOCATED'
                 OR MAN_REF_ASET_LVL_DATA.ASET_LVL_1_DESC       IS NULL
                 OR UPPER(MAN_REF_ASET_LVL_DATA.ASET_LVL_1_DESC) ='NULL')
                THEN 1
                ELSE 0
            END AS AL1DESC_FAIL_IND,
            MAN_REF_ASET_LVL_DATA.ASET_LVL_0_DESC,
            MAN_REF_ASET_LVL_DATA.ASET_LVL_1_DESC,
            MAN_REF_ASET_LVL_DATA.ASET_LVL_KEY REF_ASET_LVL_KEY
        FROM MAN_REF_ASET_LVL_DATA
        ) MAN_REF_ASET_LVL_DATA
    WHERE MAN_REF_ASET_LVL_DATA.REF_ASET_LVL_KEY(+)=TRD_VOL_UNION_VW1.ASET_LVL_KEY;
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker1>

<worker1 name="25_TVU_CREATE_ESALES_VW1">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Create view TRD_VOL_UNION_FO_VW1."></param>

	<param name="TABLE_NAME" value="TRD_VOL_UNION_900_mil"></param>
      <sql_template>
        <![CDATA[
drop view %ESALES_VIEW%;
create view %ESALES_VIEW% as
SELECT REC_CNT AS TOTAL_CNT,
        CASE
            WHEN (CTP_ESALES_ACCNAM_FAIL_IND = 1
             OR ACCOUNT_SHORT_NAME          IS NULL)
            AND CTP_UID_FAIL_IND             = 0
            THEN REC_CNT
            ELSE 0
        END AS CTP_ESALES_ACCNAM_CNT,
        CASE
            WHEN (CTP_ESALES_GPNAM_FAIL_IND = 1
             OR GP_NAME                    IS NULL)
            AND CTP_UID_FAIL_IND            = 0
            THEN REC_CNT
            ELSE 0
        END AS CTP_ESALES_GPNAM_CNT,
        CASE
            WHEN (CTP_ESALES_MGNAM_FAIL_IND = 1
             OR MG_NAME                    IS NULL)
            AND CTP_UID_FAIL_IND            = 0
            THEN REC_CNT
            ELSE 0
        END CTP_ESALES_MGNAM_CNT,
        CASE
            WHEN (CTP_ESALES_ACCNAM_FAIL_IND = 1
             OR ACCOUNT_SHORT_NAME          IS NULL)
            AND CTP_UID_FAIL_IND             = 0
            THEN CTP_UID_VAL
        END AS CTP_ESALES_ACCNAM_VAL,
        CASE
            WHEN (CTP_ESALES_GPNAM_FAIL_IND = 1
             OR GP_NAME                    IS NULL)
            AND CTP_UID_FAIL_IND            = 0
            THEN CTP_UID_VAL
        END AS CTP_ESALES_GPNAM_VAL,
        CASE
            WHEN (CTP_ESALES_MGNAM_FAIL_IND = 1
             OR MG_NAME                    IS NULL)
            AND CTP_UID_FAIL_IND            = 0
            THEN CTP_UID_VAL
        END AS CTP_ESALES_MGNAM_VAL,
        PRODUCT,
        FEED_SRC_SYS,
        SRC_FILE_CD,
        COB_DT,
        CASE
            WHEN (CTP_ESALES_MGNAM_FAIL_IND = 1
             OR MG_NAME                    IS NULL
             OR CTP_ESALES_GPNAM_FAIL_IND   = 1
             OR GP_NAME                    IS NULL)
            AND CTP_UID_FAIL_IND            = 0
            THEN CTP_ACCT_NO
        END AS CTP_ACCT_NO,
        CASE
            WHEN (CTP_ESALES_MGNAM_FAIL_IND = 1
             OR MG_NAME                    IS NULL
             OR CTP_ESALES_GPNAM_FAIL_IND   = 1
             OR GP_NAME                    IS NULL)
            AND CTP_UID_FAIL_IND            = 0
            THEN CTP_NAM
        END AS CTP_NAM,
        CASE
            WHEN (CTP_ESALES_MGNAM_FAIL_IND = 1
             OR MG_NAME                    IS NULL
             OR CTP_ESALES_GPNAM_FAIL_IND   = 1
             OR GP_NAME                    IS NULL)
            AND CTP_UID_FAIL_IND            = 0
            THEN CTP_UID_PP
        END AS CTP_UID_PP
    FROM TRD_VOL_UNION_VW1,
        (SELECT
            CASE
                WHEN TRIM(ACCOUNT_SHORT_NAME) = ''
                 OR UPPER(ACCOUNT_SHORT_NAME) ='NULL'
                 OR UPPER(ACCOUNT_SHORT_NAME) ='UNALLOCATED'
                 OR ACCOUNT_SHORT_NAME       IS NULL
                THEN 1
                ELSE 0
            END AS CTP_ESALES_ACCNAM_FAIL_IND,
            ACCOUNT_SHORT_NAME,
            CASE
                WHEN TRIM(GP_NAME) = ''
                 OR UPPER(GP_NAME) ='NULL'
                 OR UPPER(GP_NAME) ='UNALLOCATED'
                 OR GP_NAME       IS NULL
                THEN 1
                ELSE 0
            END AS CTP_ESALES_GPNAM_FAIL_IND,
            GP_NAME,
            CASE
                WHEN TRIM(MG_NAME) = ''
                 OR UPPER(MG_NAME) ='NULL'
                 OR UPPER(MG_NAME) ='UNALLOCATED'
                 OR MG_NAME       IS NULL
                THEN 1
                ELSE 0
            END AS CTP_ESALES_MGNAM_FAIL_IND,
            MG_NAME,
            ACCOUNT_ID
        FROM REF_ESALES
        ) REF_ESALES
    WHERE REF_ESALES.ACCOUNT_ID(+)   =TRD_VOL_UNION_VW1.CTP_UID_GRD
    AND ((upper(trim(FEED_SRC_SYS) ) ='ATLAS'
     OR upper(trim(FEED_SRC_SYS) )   ='BROADRIDGE'
     OR upper(trim(FEED_SRC_SYS) )   ='CTS'
     OR upper(trim(FEED_SRC_SYS) )   ='DOGS'
     OR upper(trim(FEED_SRC_SYS) )   ='GCS'
     OR upper(trim(FEED_SRC_SYS) )   ='IOWA'
     OR upper(trim(FEED_SRC_SYS) )   ='MATCHBOOK'
     OR upper(trim(FEED_SRC_SYS) )   ='NEWASKA'
     OR upper(trim(FEED_SRC_SYS) )   ='RADAR'
     OR upper(trim(SRC_FILE_CD))     ='TMLSALO'));
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker1>

<worker1 name="25_TVU_CREATE_FO_VW1">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Create view TRD_VOL_UNION_FO_VW1."></param>

	<param name="TABLE_NAME" value="TRD_VOL_UNION_900_mil"></param>
      <sql_template>
        <![CDATA[
drop view %FO_VIEW%;
create view %FO_VIEW% as
SELECT REC_CNT AS TOTAL_CNT,
        CASE
            WHEN (FO_GOC_RGN_FAIL_IND = 1
             OR GOC_RGN              IS NULL)
            AND FO_GOC_FAIL_IND       = 0
            THEN REC_CNT
            ELSE 0
        END AS FO_GOC_RGN_FAIL_CNT,
        CASE
            WHEN (FO_GOC_DESCR_FAIL_IND = 1
             OR GOC_DESCR              IS NULL)
            AND FO_GOC_FAIL_IND         = 0
            THEN REC_CNT
            ELSE 0
        END AS FO_GOC_DESCR_FAIL_CNT,
        CASE
            WHEN (FO_GOC_RGN_FAIL_IND = 1
             OR GOC_RGN              IS NULL)
            AND FO_GOC_FAIL_IND       = 0
            THEN FO_GOC_FAIL_VAL
        END AS FO_GOC_RGN_FAIL_VAL,
        CASE
            WHEN (FO_GOC_DESCR_FAIL_IND = 1
             OR GOC_DESCR              IS NULL)
            AND FO_GOC_FAIL_IND         = 0
            THEN FO_GOC_FAIL_VAL
        END AS FO_GOC_DESCR_FAIL_VAL,
        PRODUCT,
        FEED_SRC_SYS,
        SRC_FILE_CD,
        COB_DT
    FROM TRD_VOL_UNION_VW1,
        (SELECT
            CASE
                WHEN (TRIM(GOC_RGN) =''
                 OR upper(GOC_RGN ) ='UNALLOCATED'
                 OR GOC_RGN        IS NULL
                 OR upper(GOC_RGN ) ='NULL')
                THEN 1
                ELSE 0
            END AS FO_GOC_RGN_FAIL_IND,
            GOC_RGN,
            CASE
                WHEN (TRIM(GOC_DESCR) =''
                 OR upper(GOC_DESCR ) ='UNALLOCATED'
                 OR GOC_DESCR        IS NULL
                 OR upper(GOC_DESCR ) ='NULL')
                THEN 1
                ELSE 0
            END AS FO_GOC_DESCR_FAIL_IND,
            GOC_DESCR,
            GOC
        FROM REF_MNGD_SEG_HIER
        ) REF_MNGD_SEG_HIER
    WHERE TRD_VOL_UNION_VW1.FO_GOC=REF_MNGD_SEG_HIER.GOC(+);
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker1>

<worker1 name="25_TVU_DQ_CR_TVU_VIEW_1MO">
  <exec_pa_dml>
    <psql 	method="%PA_DML_TEST%" >
	<param name="DESCR" value="Create TVU View"></param>

	<param name="TABLE_NAME" value="TRD_VOL_UNION_900_mil"></param>
      <sql_template>
        <![CDATA[
drop view %TVU_VIEW_1MO%;
create view %TVU_VIEW_1MO% as
	   SELECT
        COUNT(*) REC_CNT,
        FO_GOC_FAIL_IND,
        FO_GOC_FAIL_VAL,
        ACTL_MOS_FAIL_IND,
        ACTL_MOS_FAIL_VAL,
        MOS_FAIL_IND,
        MOS_FAIL_VAL,
        ASET_LVL_KEY_FAIL_IND,
        ASET_LVL_KEY_FAIL_VAL,
        CTP_UID_FAIL_IND,
        CTP_UID_VAL,
        CTP_GFCID_GRD_FAIL_IND,
        CTP_GFCID_GRD_FAIL_VAL,
        PRODUCT,
        ACTL_MKT_OF_SETL_CD,
        ASET_LVL_KEY,
        CASE
            WHEN ASET_LVL_KEY_FAIL_IND=1
            THEN ASET_LVL_ONE_DESC
        END ASET_LVL_ONE_DESC,
        COB_DT,
        CTP_ACCT_NO,
        CTP_CPI_ACCT_NO,
        CTP_GFCID_GRD,
        CTP_NAM,
        CTP_UID_GRD,
        CTP_UID_PP,
        CASE
            WHEN ASET_LVL_KEY_FAIL_IND=1
             OR MOS_FAIL_IND          =1
            THEN CUSIP
        END CUSIP,
        CASE
            WHEN FO_GOC_FAIL_IND=1
            THEN EXPN_CD
        END EXPN_CD,
        FEED_SRC_SYS,
        CASE
            WHEN FO_GOC_FAIL_IND=1
            THEN FIRM_ACCT_NO
        END FIRM_ACCT_NO,
        FO_GOC,
        CASE
            WHEN ASET_LVL_KEY_FAIL_IND=1
             OR MOS_FAIL_IND          =1
            THEN ISIN
        END ISIN,
        --TRD_VOL_UNION.ITEM_CNT,
        CASE
            WHEN TRIM(LGL_ENTY_KEY)              = ''
             OR upper(LGL_ENTY_KEY)              ='UNALLOCATED'
             OR LGL_ENTY_KEY                    IS NULL
             OR upper(LGL_ENTY_KEY)              ='NULL'
             OR SUBSTR(trim(LGL_ENTY_KEY ), -1,1)='_'
             OR strpos(LGL_ENTY_KEY,'_NULL')     <>0
            THEN LGL_ENTY_ID_PP
        END LGL_ENTY_ID_PP,
        LGL_ENTY_KEY,
        CASE
            WHEN TRIM(LGL_ENTY_KEY)              = ''
             OR upper(LGL_ENTY_KEY)              ='UNALLOCATED'
             OR LGL_ENTY_KEY                    IS NULL
             OR upper(LGL_ENTY_KEY)              ='NULL'
             OR SUBSTR(trim(LGL_ENTY_KEY ), -1,1)='_'
             OR strpos(LGL_ENTY_KEY,'_NULL')     <>0
            THEN LGL_ENTY_NAM_PP
        END LGL_ENTY_NAM_PP,
        METRICS_CAT,
        MKT_OF_SETL_CD,
        OWN_CD,
        CASE
            WHEN ASET_LVL_KEY_FAIL_IND=1
             OR MOS_FAIL_IND          =1
            THEN SEDOL
        END SEDOL,
        SRC_FILE_CD,
        TRAN_TYP
        --        count(*) over (partition by SRC_FILE_CD)
    FROM
        (SELECT /*+ PARALLEL(TRD_VOL_UNION) DYNAMIC_SAMPLING1(TRD_VOL_UNION,1)*/
            CASE
                WHEN TRIM(FO_GOC) =''
                 OR upper(FO_GOC) ='NULL'
                 OR upper(FO_GOC) ='UNALLOCATED'
                 OR FO_GOC       IS NULL
                THEN 1
                ELSE 0
            END FO_GOC_FAIL_IND,
            CASE
                WHEN TRIM(FO_GOC) =''
                 OR FO_GOC       IS NULL
                 OR upper(FO_GOC) ='NULL'
                THEN 'NULL'
                ELSE
                    CASE
                        WHEN upper(FO_GOC)='UNALLOCATED'
                        THEN 'UNALLOCATED'
                        ELSE FO_GOC
                    END
            END FO_GOC_FAIL_VAL,
            CASE
                WHEN
                    --upper(trim(FEED_SRC_SYS) )                    <>'FLEXCUBELOANS' AND
                    (TRIM(ACTL_MKT_OF_SETL_CD)                      =''
                 OR ACTL_MKT_OF_SETL_CD                            IS NULL
                 OR upper(ACTL_MKT_OF_SETL_CD)                      ='UNALLOCATED'
                 OR upper(ACTL_MKT_OF_SETL_CD)                      ='NULL'
                 OR strpos(upper(ACTL_MKT_OF_SETL_CD),'UNALLOCATED')<>0)
                THEN 1
                ELSE 0
            END ACTL_MOS_FAIL_IND,
            CASE
                WHEN TRIM(ACTL_MKT_OF_SETL_CD) =''
                 OR ACTL_MKT_OF_SETL_CD       IS NULL
                 OR upper(ACTL_MKT_OF_SETL_CD) ='NULL'
                THEN 'NULL'
                ELSE
                    CASE
                        WHEN upper(ACTL_MKT_OF_SETL_CD)                     ='UNALLOCATED'
                         OR strpos(upper(ACTL_MKT_OF_SETL_CD),'UNALLOCATED')<>0
                        THEN upper(ACTL_MKT_OF_SETL_CD)
                        ELSE ACTL_MKT_OF_SETL_CD
                    END
            END ACTL_MOS_FAIL_VAL,
            CASE
                WHEN
                    --upper(trim(FEED_SRC_SYS) )                    <>'FLEXCUBELOANS' AND
                    (TRIM(MKT_OF_SETL_CD)                      =''
                 OR MKT_OF_SETL_CD                            IS NULL
                 OR upper(MKT_OF_SETL_CD)                      ='UNALLOCATED'
                 OR upper(MKT_OF_SETL_CD)                      ='NULL'
                 OR strpos(upper(MKT_OF_SETL_CD),'UNALLOCATED')<>0)
                THEN 1
                ELSE 0
            END MOS_FAIL_IND,
            CASE
                WHEN TRIM(MKT_OF_SETL_CD) =''
                 OR MKT_OF_SETL_CD       IS NULL
                 OR upper(MKT_OF_SETL_CD) ='NULL'
                THEN 'NULL'
                ELSE
                    CASE
                        WHEN upper(MKT_OF_SETL_CD)                     ='UNALLOCATED'
                         OR strpos(upper(MKT_OF_SETL_CD),'UNALLOCATED')<>0
                        THEN upper(MKT_OF_SETL_CD)
                        ELSE MKT_OF_SETL_CD
                    END
            END MOS_FAIL_VAL,
            CASE
                WHEN trim(ASET_LVL_KEY)               =''
                 OR upper(ASET_LVL_KEY)               ='UNALLOCATED'
                 OR ASET_LVL_KEY                     IS NULL
                 OR upper(ASET_LVL_KEY)               ='NULL'
                 OR strpos(ASET_LVL_KEY,'___')        <>0
                 OR strpos(ASET_LVL_KEY,'UNALLOCATED')<>0
                THEN 1
                ELSE 0
            END AS ASET_LVL_KEY_FAIL_IND,
            CASE
                WHEN TRIM(ASET_LVL_KEY) =''
                 OR ASET_LVL_KEY       IS NULL
                 OR upper(ASET_LVL_KEY) ='NULL'
                THEN 'NULL'
                ELSE ASET_LVL_KEY
            END AS ASET_LVL_KEY_FAIL_VAL,
            CASE
                WHEN TRIM(CTP_UID_GRD) =''
                 OR upper(CTP_UID_GRD) ='NULL'
                 OR upper(CTP_UID_GRD) ='UNALLOCATED'
                 OR CTP_UID_GRD       IS NULL
                THEN 1
                ELSE 0
            END AS CTP_UID_FAIL_IND,
            CASE
                WHEN TRIM(CTP_UID_GRD) =''
                 OR CTP_UID_GRD       IS NULL
                 OR upper(CTP_UID_GRD) ='NULL'
                THEN 'NULL'
                ELSE CTP_UID_GRD
            END AS CTP_UID_VAL,
            CASE
                WHEN TRIM(CTP_GFCID_GRD) =''
                 OR upper(CTP_GFCID_GRD) ='NULL'
                 OR upper(CTP_GFCID_GRD) ='UNALLOCATED'
                 OR CTP_GFCID_GRD       IS NULL
                THEN 1
                ELSE 0
            END CTP_GFCID_GRD_FAIL_IND,
            CASE
                WHEN TRIM(CTP_GFCID_GRD) =''
                 OR CTP_GFCID_GRD       IS NULL
                 OR upper(CTP_GFCID_GRD) ='NULL'
                THEN 'NULL'
                ELSE CTP_GFCID_GRD
            END CTP_GFCID_GRD_FAIL_VAL,
            CASE
                WHEN ( ( FEED_SRC_SYS )= 'ATLAS'
                 OR ( FEED_SRC_SYS )   ='BRDRDGE'
                 OR ( FEED_SRC_SYS )   = 'BROADRIDGE'
                 OR ( FEED_SRC_SYS )   ='CNS'
                 OR ( FEED_SRC_SYS )   ='COPES-SG'
                 OR ( FEED_SRC_SYS )   ='COPES-TH'
                 OR ( FEED_SRC_SYS )   ='CTS'
                 OR ( FEED_SRC_SYS )   ='DOGS'
                 OR ( FEED_SRC_SYS )   ='TML'
                 OR ( FEED_SRC_SYS )   ='GCS'
                 OR ( FEED_SRC_SYS )   ='IOWA'
                 OR ( FEED_SRC_SYS )   ='KOSMOS'
                 OR ( FEED_SRC_SYS )   ='MATCHBOOK'
                 OR ( FEED_SRC_SYS )   ='TML'
                 OR ( FEED_SRC_SYS )   ='NEWASKA'
                 OR ( FEED_SRC_SYS )   ='RADAR'
                 OR ( FEED_SRC_SYS )   ='SMS_Set'
                 OR ( FEED_SRC_SYS )   ='SMS_Exe'
                 OR ( FEED_SRC_SYS )   ='RTGSA')
                THEN 'CASH_SECURITIES'
                WHEN (( FEED_SRC_SYS )='OPENLINK_UK')
                THEN 'COMMODITIES'
                WHEN ( ( FEED_SRC_SYS )='DEPOTTRACS' )
                THEN 'FX'
                WHEN ( ( FEED_SRC_SYS )='FLXLAG'
                 OR ( FEED_SRC_SYS )   ='FLXORG3'
                 OR ( FEED_SRC_SYS )   ='FLXORG1'
                 OR ( FEED_SRC_SYS )   ='FLEXCUBELOANS')
                THEN 'LOANS'
                WHEN (( FEED_SRC_SYS )='OPICS CA'
                 OR ( FEED_SRC_SYS )  ='OPICS NY' )
                THEN 'MONEY_MARKETS'
                WHEN( ( FEED_SRC_SYS )='OASYS')
                THEN 'OTC_DERIVATIVES'
                ELSE 'OTHER'
            END PRODUCT,
            TRD_VOL_UNION.ACTL_MKT_OF_SETL_CD,
            TRD_VOL_UNION.ASET_LVL_KEY,
            TRD_VOL_UNION.ASET_LVL_ONE_DESC,
            'Q'
            || TO_CHAR(TRD_VOL_UNION.COB_DT,'Q-yyyy') COB_DT,
            TRD_VOL_UNION.CTP_ACCT_NO,
            TRD_VOL_UNION.CTP_CPI_ACCT_NO,
            TRD_VOL_UNION.CTP_GFCID_GRD,
            TRD_VOL_UNION.CTP_NAM,
            TRD_VOL_UNION.CTP_UID_GRD,
            TRD_VOL_UNION.CTP_UID_PP,
            TRD_VOL_UNION.CUSIP,
            TRD_VOL_UNION.EXPN_CD,
            TRD_VOL_UNION.FEED_SRC_SYS,
            TRD_VOL_UNION.FIRM_ACCT_NO,
            TRD_VOL_UNION.FO_GOC,
            TRD_VOL_UNION.ISIN,
            TRD_VOL_UNION.LGL_ENTY_ID_PP,
            TRD_VOL_UNION.LGL_ENTY_KEY,
            TRD_VOL_UNION.LGL_ENTY_NAM_PP,
            TRD_VOL_UNION.METRICS_CAT,
            TRD_VOL_UNION.MKT_OF_SETL_CD,
            TRD_VOL_UNION.OWN_CD,
            TRD_VOL_UNION.SEDOL,
            TRD_VOL_UNION.SRC_FILE_CD,
            TRD_VOL_UNION.TRAN_TYP
        FROM %TABLE_NAME% TRD_VOL_UNION  --partition for (to_date('2011-06-16 00:00:00','SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
        WHERE FEED_SRC_SYS <> 'SMS'
        AND FEED_SRC_SYS   <> 'EQDW'
        AND METRICS_CAT    <> 'Volumes Other'
            --AND ( ( TRD_VOL_UNION.COB_DT )   >= TRUNC(to_date('22-aug-2011'), 'MM') )
            --        AND ( ( COB_DT ) = '08-SEP-2011')
            AND ( ( TRD_VOL_UNION.COB_DT )             >= '01-JAN-2011')
            AND ( ( TRD_VOL_UNION.COB_DT )             <= '31-JAN-2011')
        )
    GROUP BY ACTL_MKT_OF_SETL_CD,
        ASET_LVL_KEY,
        ASET_LVL_ONE_DESC,
        COB_DT,
        CTP_ACCT_NO,
        CTP_CPI_ACCT_NO,
        CTP_GFCID_GRD,
        CTP_NAM,
        CTP_UID_GRD,
        CTP_UID_PP,
        CUSIP,
        EXPN_CD,
        FEED_SRC_SYS,
        FIRM_ACCT_NO,
        FO_GOC,
        ISIN,
        --ITEM_CNT,
        LGL_ENTY_ID_PP,
        LGL_ENTY_KEY,
        LGL_ENTY_NAM_PP,
        METRICS_CAT,
        MKT_OF_SETL_CD,
        OWN_CD,
        SEDOL,
        SRC_FILE_CD,
        TRAN_TYP,
        FO_GOC_FAIL_IND,
        FO_GOC_FAIL_VAL,
        ACTL_MOS_FAIL_IND,
        ACTL_MOS_FAIL_VAL,
        MOS_FAIL_IND,
        MOS_FAIL_VAL,
        ASET_LVL_KEY_FAIL_IND,
        ASET_LVL_KEY_FAIL_VAL,
        CTP_UID_FAIL_IND,
        CTP_UID_VAL,
        CTP_GFCID_GRD_FAIL_IND,
        CTP_GFCID_GRD_FAIL_VAL,
        PRODUCT;
		]]>
      </sql_template>
    </psql>
  </exec_pa_dml>
</worker1>




	
</etldataflow>