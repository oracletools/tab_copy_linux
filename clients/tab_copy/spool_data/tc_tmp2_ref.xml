<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2011 . All rights reserved.
     Author: AlexBuzunov@gmail.com (Alex Buzunov)
     Python Implementation of ETL pipeline
-->
<etldataflow name="SMC_SPOOL">
<globals>

	<!-- PIPELINE execution type
		 SYNC - synchronous, ANYNC - asynchronous 
	-->
	  <param name="FLOW_TYPE" value="ASYNC"></param>	

	  <param name="FIELD_TERMINATOR" value="|"></param>
	  <param name="LINE_TERMINATOR" value="''"></param>
	  
  
	  <param name="FROM_DB" value="%DL_GMAU%"></param>
	  <param name="FROM_DB1" value="%AB_SMARTP1B%"></param>
	  <param name="FROM_SCHEMA" value="DLROGMARWSMART"></param>
	  <param name="DB_CONNECTOR1" value="%DL_GMAU%"></param>
	  
	  
	   <!--will spool ALL records if LAME_DUCK=0-->
	  <param name="LAME_DUCK" value='0'></param>
	  <param name="ARRAYSIZE" value="5000"></param>
	  <param name="COPYCOMMIT" value="4"></param>
	  <!--sqlp attribute-->
		
		
	  <param name="SOURCE_FILE" value="--replaced from command line"></param>	
	  <param name="COB_YEAR" value="--replaced from command line"></param>

</globals>


<worker name="one_forth_0">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table TMP_RIDS_P_0
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=50
--/

insert --+append
into TMP_RIDS_P_0
select --+parallel_(8)
t.rowid trid,nvl2(R.SMC_ISSUER_ID,nvl2(t1.SMC_PROD_ID,0,1),nvl2(t1.SMC_PROD_ID,0,2)) in_out --,
--T.SMC_PROD_ID,t1.SMC_PROD_ID t1_SMC_PROD_ID,R.SMC_ISSUER_ID
FROM  (select rowid,T.SMC_ISSUER_ID,t.SMC_PROD_ID from REF_SMC T where  ROWID BETWEEN 'AAPbxwAA2AAHqgAAAA' AND 'AAPbxwAA3AAE4P/APo') T ,STG_REF_SMC_ISSUER R ,del_p_inx t1
where T.SMC_ISSUER_ID=R.SMC_ISSUER_ID(+)
and t.SMC_PROD_ID =t1.SMC_PROD_ID(+)
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker>

<worker name="one_fifth_1">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table TMP_RIDS_P_1
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=50
--/

insert --+append
into TMP_RIDS_P_1
select --+parallel_(8)
t.rowid trid,nvl2(R.SMC_ISSUER_ID,nvl2(t1.SMC_PROD_ID,0,1),nvl2(t1.SMC_PROD_ID,0,2)) in_out --,
--T.SMC_PROD_ID,t1.SMC_PROD_ID t1_SMC_PROD_ID,R.SMC_ISSUER_ID
FROM  (select rowid,T.SMC_ISSUER_ID,t.SMC_PROD_ID from REF_SMC T where  ROWID BETWEEN 'AAPbxwAA1AAHf8AAAA' AND 'AAPbxwAA2AAAg9/APo') T ,STG_REF_SMC_ISSUER R ,del_p_inx t1
where T.SMC_ISSUER_ID=R.SMC_ISSUER_ID(+)
and t.SMC_PROD_ID =t1.SMC_PROD_ID(+)
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker>


<worker name="one_fifth_2">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table TMP_RIDS_P_2
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=50
--/

insert --+append
into TMP_RIDS_P_2
select --+parallel_(8)
t.rowid trid,nvl2(R.SMC_ISSUER_ID,nvl2(t1.SMC_PROD_ID,0,1),nvl2(t1.SMC_PROD_ID,0,2)) in_out --,
--T.SMC_PROD_ID,t1.SMC_PROD_ID t1_SMC_PROD_ID,R.SMC_ISSUER_ID
FROM  (select rowid,T.SMC_ISSUER_ID,t.SMC_PROD_ID from REF_SMC T where  ROWID BETWEEN 'AAPbxwAA2AAAheAAAA' AND 'AAPbxwAA2AAHg//APo') T ,STG_REF_SMC_ISSUER R ,del_p_inx t1
where T.SMC_ISSUER_ID=R.SMC_ISSUER_ID(+)
and t.SMC_PROD_ID =t1.SMC_PROD_ID(+)
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker>

<worker name="one_fifth_1">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table TMP_RIDS_P_3
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=50
--/

insert --+append
into TMP_RIDS_P_3
select --+parallel_(8)
t.rowid trid,nvl2(R.SMC_ISSUER_ID,nvl2(t1.SMC_PROD_ID,0,1),nvl2(t1.SMC_PROD_ID,0,2)) in_out --,
--T.SMC_PROD_ID,t1.SMC_PROD_ID t1_SMC_PROD_ID,R.SMC_ISSUER_ID
FROM  (select rowid,T.SMC_ISSUER_ID,t.SMC_PROD_ID from REF_SMC T where  ROWID BETWEEN 'AAPbxwAA1AAAAEAAAA' AND 'AAPbxwAA1AAHf7/APo' ) T ,STG_REF_SMC_ISSUER R ,del_p_inx t1
where T.SMC_ISSUER_ID=R.SMC_ISSUER_ID(+)
and t.SMC_PROD_ID =t1.SMC_PROD_ID(+)
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker>


<worker1 name="one_fifth_2">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table TMP_RIDS_P_4
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=50
--/

insert --+append
into TMP_RIDS_P_4
select --+parallel_(8)
t.rowid trid,nvl2(R.SMC_ISSUER_ID,nvl2(t1.SMC_PROD_ID,0,1),nvl2(t1.SMC_PROD_ID,0,2)) in_out --,
--T.SMC_PROD_ID,t1.SMC_PROD_ID t1_SMC_PROD_ID,R.SMC_ISSUER_ID
FROM  (select rowid,T.SMC_ISSUER_ID,t.SMC_PROD_ID from REF_SMC T where  ROWID BETWEEN 'AAPbxwAA2AAFwkAAAA' AND 'AAPbxwAA2AAIKH/APo' ) T ,STG_REF_SMC_ISSUER R ,del_p_inx t1
where T.SMC_ISSUER_ID=R.SMC_ISSUER_ID(+)
and t.SMC_PROD_ID =t1.SMC_PROD_ID(+)
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker1>

<worker1 name="SMC_MR_II_C_E_P">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table TMP_RIDS_P2
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=20
--/

insert --+append
into TMP_RIDS_P2
  select --+parallel(8)
t.rowid trid,t1.SMC_PROD_ID t1_SMC_PROD_ID,nvl2(R.SMC_ISSUER_ID,nvl2(t1.SMC_PROD_ID,0,1),nvl2(t1.SMC_PROD_ID,0,2)) in_out --,
--T.SMC_PROD_ID,t1.SMC_PROD_ID t1_SMC_PROD_ID,R.SMC_ISSUER_ID 
FROM  REF_SMC T ,STG_REF_SMC_ISSUER R ,del_p_inx t1
where T.SMC_ISSUER_ID=R.SMC_ISSUER_ID(+)
and t.SMC_PROD_ID =t1.SMC_PROD_ID(+)
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker1>


--13m22.368s

<worker1 name="SMC_MR_II_C_E_P">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table TMP_RIDS_P
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=50
--/

insert --+append
into TMP_RIDS_P
select decode(in_out, 0,  t1_rid,trid), in_out from (
select --+parallel(8)
t.rowid trid,t1.rowid t1_rid,nvl2(R.SMC_ISSUER_ID,nvl2(t1.SMC_PROD_ID,0,1),nvl2(t1.SMC_PROD_ID,0,2)) in_out --,
--T.SMC_PROD_ID,t1.SMC_PROD_ID t1_SMC_PROD_ID,R.SMC_ISSUER_ID 
FROM  REF_SMC T ,STG_REF_SMC_ISSUER R ,del_p_inx t1
where T.SMC_ISSUER_ID=R.SMC_ISSUER_ID(+)
and t.SMC_PROD_ID =t1.SMC_PROD_ID(+))
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker1>

--5m35.263s

<worker1 name="SMC_MR_II_C_E_P">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table TMP_RIDS_P
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=50
--/

insert --+append
into TMP_RIDS_P
select --+parallel(8)
t.rowid trid,nvl2(R.SMC_ISSUER_ID,nvl2(t1.SMC_PROD_ID,0,1),nvl2(t1.SMC_PROD_ID,0,2)) in_out --,
--T.SMC_PROD_ID,t1.SMC_PROD_ID t1_SMC_PROD_ID,R.SMC_ISSUER_ID 
FROM  REF_SMC T ,STG_REF_SMC_ISSUER R ,del_p_inx t1
where T.SMC_ISSUER_ID=R.SMC_ISSUER_ID(+)
and t.SMC_PROD_ID =t1.SMC_PROD_ID(+)
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker1>


--2m14.232s

<worker1 name="SMC_MR_II_C_E_P">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table del_trids
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

alter session set PARALLEL_MIN_PERCENT=50
/

insert --+append
into del_trids
select --+parallel(8)
t.rowid trid,T.SMC_PROD_ID,t1.SMC_PROD_ID t1_SMC_PROD_ID,R.SMC_ISSUER_ID FROM  REF_SMC T ,STG_REF_SMC_ISSUER R ,GTT_REF_SMC1 t1
where T.SMC_ISSUER_ID=R.SMC_ISSUER_ID
and t.SMC_PROD_ID =t1.SMC_PROD_ID(+)
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker1>

<worker1 name="SMC_MR_II_C_E_P">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
--truncate table TMP2_REF_SMC2
--/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=50
--/

INSERT
      /*+ APPEND */
    INTO TMP_REF_SMC1    
    SELECT
      /*+ PARALLEL (T2,4)*/
      *
    FROM TMP2_REF_SMC2 T2
    WHERE SMC_PROD_ID NOT IN
      (SELECT /*+ PARALLEL_INDEX(T1)*/
        SMC_PROD_ID FROM TMP_REF_SMC1 T1
      );
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker1>

<worker1 name="SMC_MR_II_C_E_P">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table TMP2_INOUT
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=50
--/

insert --+append
 into TMP2_INOUT 
SELECT/*+ FULL(T) FULL(R) INDEX_FFS(T1) */  nvl2(T1.SMC_PROD_ID,1,0) in_out, T.SMC_PROD_ID AS SMC_PROD_ID,
      T.SMC_SCR_KEY      AS SMC_SCR_KEY,
      T.SMC_MSD_KEY      AS SMC_MSD_KEY,
      T.PROD_SHRT_DESC   AS PROD_SHRT_DESC,
      T.PROD_LNG_DESC    AS PROD_LNG_DESC,
      CAST(T.OPER_IND AS      CHAR(1)) OPER_IND,
      CAST(T.IS_DUMMY_PROD AS CHAR(1)) IS_DUMMY_PROD,
      T.MKT_SECT_DESC   AS MKT_SECT_DESC,
      T.SCR_TYP_LVL_1   AS SCR_TYP_LVL_1,
      T.SCR_TYP_LVL_2   AS SCR_TYP_LVL_2,
      T.SERIES          AS SERIES,
      R.ISS_CTRY        AS ISS_CTRY,
      T.ISS_CCY         AS ISS_CCY,
      T.INSM_LSTG_LVL   AS INSM_LSTG_LVL,
      T.MKT             AS MKT,
      T.CON_TYP         AS CON_TYP,
      T.MKT_SEG         AS MKT_SEG,
      T.GMI_TKR         AS GMI_TKR,
      T.MAT_MO          AS MAT_MO,
      T.MAT_YR          AS MAT_YR,
      T.CUSIP           AS CUSIP,
      T.ISIN            AS ISIN,
      T.RIC             AS RIC,
      T.SEDOL           AS SEDOL,
      T.COM_CD          AS COM_CD,
      T.BLMBRG_PK       AS BLMBRG_PK,
      T.BLMBRG_UNIQ_KEY AS BLMBRG_UNIQ_KEY,
      CAST(T.NASD_TRCE_FLAG AS CHAR(1)) NASD_TRCE_FLAG,
      CAST(T.IS_IN_DFLT AS     CHAR(1)) IS_IN_DFLT,
      R.CRTD_BY                 AS CRTD_BY,
      R.CRTD_TS                 AS CRTD_TS,
      R.LST_UPDT_BY             AS LST_UPDT_BY,
      R.LST_UPDT_TS             AS LST_UPDT_TS,
      T.SCR_CUSIP               AS SCR_CUSIP,
      T.BLMBRG_CUSIP            AS BLMBRG_CUSIP,
      R.ORIG_ISS_CTRY           AS ORIG_ISS_CTRY,
      'U'                       AS IND_KEY,
      R.SMC_ISSUER_ID           AS SMC_ISSUER_ID,
      R.ISSUER_CTRY_OF_INCORP   AS ISSUER_CTRY_OF_INCORP,
      R.SMC_ISSUER_NAM          AS SMC_ISSUER_NAM,
      T.PROD_ISSUE_STA          AS PROD_ISSUE_STA,
      T.SCR_TYP_LVL_3           AS SCR_TYP_LVL_3,
      T.GLBL_LCK_IND            AS GLBL_LCK_IND,
      T.CHILLED_STATUS          AS CHILLED_STATUS,
      T.COUPON_DIV_RT           AS COUPON_DIV_RT,
      T.COUPON_DIV_TYP          AS COUPON_DIV_TYP,
      T.DAYS_TO_SETL            AS DAYS_TO_SETL,
      T.ISS_DT                  AS ISS_DT,
      T.BLMBRG_TCKR             AS BLMBRG_TCKR,
      T.MSD_SMBOL               AS MSD_SMBOL,
      T.IRIC                    AS IRIC,
      T.REC_SRC                 AS REC_SRC,
      T.IS_WTFAST               AS IS_WTFAST,
      T.IS_3C7                  AS IS_3C7,
      T.IS_CEDEL                AS IS_CEDEL,
      T.IS_PLEDGECHILL          AS IS_PLEDGECHILL,
      T.IS_SEGREGATIONCHILL     AS IS_SEGREGATIONCHILL,
      T.IS_FEDBOOKENTRY         AS IS_FEDBOOKENTRY,
      T.IS_DEPOSITCHIL          AS IS_DEPOSITCHIL,
      T.Is_DTCCDelete           AS Is_DTCCDelete,
      T.Is_NSCC                 AS Is_NSCC,
      T.Is_Reorg                AS Is_Reorg,
      T.Is_Seg100               AS Is_Seg100,
      T.Is_CODFast              AS Is_CODFast,
      T.Is_CNSEligible          AS Is_CNSEligible,
      T.Is_WTchill              AS Is_WTchill,
      T.Is_interDepositoryChill AS Is_interDepositoryChill,
      T.PTMLevy_Indicator       AS PTMLevy_Indicator,
      T.Is_DTCRegistered        AS Is_DTCRegistered,
      T.IS_DTC                  AS IS_DTC,
      T.IS_DTCCinterimStatus    AS IS_DTCCinterimStatus,
      T.Is_CodChill             AS Is_CodChill,
      T.Is_Communication        AS Is_Communication,
      T.Is_Dochill              AS Is_Dochill,
      T.Is_CustodyService       AS Is_CustodyService,
      T.Is_Euroclear            AS Is_Euroclear,
      T.Is_Salomon              AS Is_Salomon,
      T.Is_ReorgDeposit         AS Is_ReorgDeposit,
      T.UKStampDuty_Market      AS UKStampDuty_Market,
      T.Is_DTCFrozen            AS Is_DTCFrozen,
      T.Is_FedFund              AS Is_FedFund,
      T.Is_BookEntry            AS Is_BookEntry,
      T.Is_EDSEligible          AS Is_EDSEligible,
      --Release 4.1
      T.GRIC             AS GRIC,
      T.IS_GLOBALPRIMARY AS IS_GLOBALPRIMARY FROM STG_REF_SMC_ISSUER R, REF_SMC T,
      TMP_REF_SMC1 t1
      where (R.SMC_ISSUER_ID=T.SMC_ISSUER_ID) and t.SMC_PROD_ID = t1.SMC_PROD_ID(+) 
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker1>


--7m5.330s

<worker1 name="SMC_MR_II_C_E_P">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table TMP2_REF_SMC2
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

alter session set PARALLEL_MIN_PERCENT=50
/

INSERT /*+ APPEND */ INTO TMP2_REF_SMC2 
SELECT/*+ FULL(T) FULL(R) parallel(8) */  T.SMC_PROD_ID AS SMC_PROD_ID,
      T.SMC_SCR_KEY      AS SMC_SCR_KEY,
      T.SMC_MSD_KEY      AS SMC_MSD_KEY,
      T.PROD_SHRT_DESC   AS PROD_SHRT_DESC,
      T.PROD_LNG_DESC    AS PROD_LNG_DESC,
      CAST(T.OPER_IND AS      CHAR(1)) OPER_IND,
      CAST(T.IS_DUMMY_PROD AS CHAR(1)) IS_DUMMY_PROD,
      T.MKT_SECT_DESC   AS MKT_SECT_DESC,
      T.SCR_TYP_LVL_1   AS SCR_TYP_LVL_1,
      T.SCR_TYP_LVL_2   AS SCR_TYP_LVL_2,
      T.SERIES          AS SERIES,
      R.ISS_CTRY        AS ISS_CTRY,
      T.ISS_CCY         AS ISS_CCY,
      T.INSM_LSTG_LVL   AS INSM_LSTG_LVL,
      T.MKT             AS MKT,
      T.CON_TYP         AS CON_TYP,
      T.MKT_SEG         AS MKT_SEG,
      T.GMI_TKR         AS GMI_TKR,
      T.MAT_MO          AS MAT_MO,
      T.MAT_YR          AS MAT_YR,
      T.CUSIP           AS CUSIP,
      T.ISIN            AS ISIN,
      T.RIC             AS RIC,
      T.SEDOL           AS SEDOL,
      T.COM_CD          AS COM_CD,
      T.BLMBRG_PK       AS BLMBRG_PK,
      T.BLMBRG_UNIQ_KEY AS BLMBRG_UNIQ_KEY,
      CAST(T.NASD_TRCE_FLAG AS CHAR(1)) NASD_TRCE_FLAG,
      CAST(T.IS_IN_DFLT AS     CHAR(1)) IS_IN_DFLT,
      R.CRTD_BY                 AS CRTD_BY,
      R.CRTD_TS                 AS CRTD_TS,
      R.LST_UPDT_BY             AS LST_UPDT_BY,
      R.LST_UPDT_TS             AS LST_UPDT_TS,
      T.SCR_CUSIP               AS SCR_CUSIP,
      T.BLMBRG_CUSIP            AS BLMBRG_CUSIP,
      R.ORIG_ISS_CTRY           AS ORIG_ISS_CTRY,
      'U'                       AS IND_KEY,
      R.SMC_ISSUER_ID           AS SMC_ISSUER_ID,
      R.ISSUER_CTRY_OF_INCORP   AS ISSUER_CTRY_OF_INCORP,
      R.SMC_ISSUER_NAM          AS SMC_ISSUER_NAM,
      T.PROD_ISSUE_STA          AS PROD_ISSUE_STA,
      T.SCR_TYP_LVL_3           AS SCR_TYP_LVL_3,
      T.GLBL_LCK_IND            AS GLBL_LCK_IND,
      T.CHILLED_STATUS          AS CHILLED_STATUS,
      T.COUPON_DIV_RT           AS COUPON_DIV_RT,
      T.COUPON_DIV_TYP          AS COUPON_DIV_TYP,
      T.DAYS_TO_SETL            AS DAYS_TO_SETL,
      T.ISS_DT                  AS ISS_DT,
      T.BLMBRG_TCKR             AS BLMBRG_TCKR,
      T.MSD_SMBOL               AS MSD_SMBOL,
      T.IRIC                    AS IRIC,
      T.REC_SRC                 AS REC_SRC,
      T.IS_WTFAST               AS IS_WTFAST,
      T.IS_3C7                  AS IS_3C7,
      T.IS_CEDEL                AS IS_CEDEL,
      T.IS_PLEDGECHILL          AS IS_PLEDGECHILL,
      T.IS_SEGREGATIONCHILL     AS IS_SEGREGATIONCHILL,
      T.IS_FEDBOOKENTRY         AS IS_FEDBOOKENTRY,
      T.IS_DEPOSITCHIL          AS IS_DEPOSITCHIL,
      T.Is_DTCCDelete           AS Is_DTCCDelete,
      T.Is_NSCC                 AS Is_NSCC,
      T.Is_Reorg                AS Is_Reorg,
      T.Is_Seg100               AS Is_Seg100,
      T.Is_CODFast              AS Is_CODFast,
      T.Is_CNSEligible          AS Is_CNSEligible,
      T.Is_WTchill              AS Is_WTchill,
      T.Is_interDepositoryChill AS Is_interDepositoryChill,
      T.PTMLevy_Indicator       AS PTMLevy_Indicator,
      T.Is_DTCRegistered        AS Is_DTCRegistered,
      T.IS_DTC                  AS IS_DTC,
      T.IS_DTCCinterimStatus    AS IS_DTCCinterimStatus,
      T.Is_CodChill             AS Is_CodChill,
      T.Is_Communication        AS Is_Communication,
      T.Is_Dochill              AS Is_Dochill,
      T.Is_CustodyService       AS Is_CustodyService,
      T.Is_Euroclear            AS Is_Euroclear,
      T.Is_Salomon              AS Is_Salomon,
      T.Is_ReorgDeposit         AS Is_ReorgDeposit,
      T.UKStampDuty_Market      AS UKStampDuty_Market,
      T.Is_DTCFrozen            AS Is_DTCFrozen,
      T.Is_FedFund              AS Is_FedFund,
      T.Is_BookEntry            AS Is_BookEntry,
      T.Is_EDSEligible          AS Is_EDSEligible,
      --Release 4.1
      T.GRIC             AS GRIC,
      T.IS_GLOBALPRIMARY AS IS_GLOBALPRIMARY FROM STG_REF_SMC_ISSUER R JOIN REF_SMC T ON (R.SMC_ISSUER_ID=T.SMC_ISSUER_ID)  
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker1>


<worker1 name="SMC_MR_II_C_E_P">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table del_p_i_ii_m_r_1
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=50
--/

insert --+append 
into  del_p_i_ii_m_r_1 
      select --+full(p) full(i) full(ii) parallel(8)
      P.SMCP,P.SHORTDESCRIPTION,P.DESCRIPTION,P.OPERATIONALINDICATOR,P.ISDUMMYPRODUCT,  P.MARKETSECTORDESCRIPTION
      ,P.ISSUECURRENCY,P.MARKET, P.MARKETSEGMENT,P.ISINDEFAULT,P.ISSUESTATUS,P.SECURITYTYPELEVEL3,P.ISSUEDATE
      ,I.SMCI,I.ISSUERCOUNTRYOFINCORPORATION,I.ISSUERNAME
      ,P.SECURITYTYPELEVEL1,P.SECURITYTYPELEVEL2, P.SERIES,(
        CASE
        WHEN I.ISSUERCOUNTRYOFRISK IS NULL THEN
          CASE
          WHEN P.COUNTRY IS NULL THEN
            'UNALLOCATED'
          ELSE
            P.COUNTRY
          END
        ELSE
          I.ISSUERCOUNTRYOFRISK
        END )
    AS
      ISS_CTRY,      (
        CASE
        WHEN I.ISSUERCOUNTRY IS NULL THEN
          CASE
          WHEN P.COUNTRY IS NULL THEN
            'UNALLOCATED'
          ELSE
            P.COUNTRY
          END
        ELSE
          I.ISSUERCOUNTRY
        END )
    AS
      ORIG_ISS_CTRY, II.COUPONDIVIDENDRATE,M.NASDTRACEFLAG,R.CURRENTMATURITYDATE
      FROM C160970SMC.PRODUCT@gmail.com P, C160970SMC.ISSUER@gmail.com I,C160970SMC.INCOME_INFORMATION@gmail.com II,
      C160970SMC.SECURITY_LAST_UPDATE@gmail.com SLU, C160970SMC.COMPLIANCE@gmail.com M,C160970SMC.REDEMPTION@gmail.com R
      WHERE P.ISSUERSMCI = I.SMCI(+)  and  P.SMCP = M.SMCP(+) and  P.SMCP=II.SMCP(+) and P.SMCP=SLU.smcp and P.SMCP = R.SMCP(+)
      and DDAMODIFIEDTS > sysdate-1      
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker1>



  
<worker1 name="SMC_MR_II_C_E_P">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[
truncate table del_p_i_ii_m_1
/

--ALTER SESSION ENABLE PARALLEL DML
--/

alter session set COMMIT_LOGGING =BATCH
/

alter session set COMMIT_WAIT=NOWAIT
/

--alter session set PARALLEL_MIN_PERCENT=50
--/

insert --+append 
into  del_p_i_ii_m_1 
      select --+full(p) full(i) full(ii) parallel(8)
      P.SMCP,P.SHORTDESCRIPTION,P.DESCRIPTION,P.OPERATIONALINDICATOR,P.ISDUMMYPRODUCT,  P.MARKETSECTORDESCRIPTION
      ,P.ISSUECURRENCY,P.MARKET, P.MARKETSEGMENT,P.ISINDEFAULT,P.ISSUESTATUS,P.SECURITYTYPELEVEL3,P.ISSUEDATE
      ,I.SMCI,I.ISSUERCOUNTRYOFINCORPORATION,I.ISSUERNAME
      ,P.SECURITYTYPELEVEL1,P.SECURITYTYPELEVEL2, P.SERIES,(
        CASE
        WHEN I.ISSUERCOUNTRYOFRISK IS NULL THEN
          CASE
          WHEN P.COUNTRY IS NULL THEN
            'UNALLOCATED'
          ELSE
            P.COUNTRY
          END
        ELSE
          I.ISSUERCOUNTRYOFRISK
        END )
    AS
      ISS_CTRY,      (
        CASE
        WHEN I.ISSUERCOUNTRY IS NULL THEN
          CASE
          WHEN P.COUNTRY IS NULL THEN
            'UNALLOCATED'
          ELSE
            P.COUNTRY
          END
        ELSE
          I.ISSUERCOUNTRY
        END )
    AS
      ORIG_ISS_CTRY, II.COUPONDIVIDENDRATE,M.NASDTRACEFLAG
      FROM C160970SMC.PRODUCT@gmail.com P, C160970SMC.ISSUER@gmail.com I,C160970SMC.INCOME_INFORMATION@gmail.com II,
      C160970SMC.SECURITY_LAST_UPDATE@gmail.com SLU, C160970SMC.COMPLIANCE@gmail.com M
      WHERE P.ISSUERSMCI = I.SMCI(+)  and  P.SMCP = M.SMCP(+) and  P.SMCP=II.SMCP(+) and P.SMCP=SLU.smcp
      and DDAMODIFIEDTS > sysdate-1      
/

commit
/


set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/

/*
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'SMC_MR_II_C_E_P',
method_opt => 'FOR COLUMNS SMCP',
granularity => 'PARTITION',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/
*/
]]>
      </sql_template>
    </table_utils>
  </exec_select>
</worker1>




</etldataflow>
