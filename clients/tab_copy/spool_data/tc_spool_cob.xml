<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2011 . All rights reserved.
     Author: AlexBuzunov@gmail.com (Alex Buzunov)
     Python Implementation of ETL pipeline
-->
<etldataflow name="SMC_SPOOL">
<globals>

	<!-- PIPELINE execution type
		 SYNC - synchronous, ANYNC - asynchronous 
	-->
	  <param name="FLOW_TYPE" value="SYNC"></param>	

	  <param name="FIELD_TERMINATOR" value="|"></param>
	  <param name="LINE_TERMINATOR" value="''"></param>
	  
  
	  <param name="FROM_DB" value="%DL_GMAU%"></param>
	  <param name="FROM_DB1" value="%AB_SMARTP1B%"></param>
	  <param name="FROM_SCHEMA" value="DLROGMARWSMART"></param>
	  <param name="DB_CONNECTOR1" value="%DL_GMAU%"></param>
	  
	  
	   <!--will spool ALL records if LAME_DUCK=0-->
	  <param name="LAME_DUCK" value='0'></param>
	  <param name="ARRAYSIZE" value="5000"></param>
	  <param name="COPYCOMMIT" value="4"></param>
	  <!--sqlp attribute-->
		
		
	  <param name="SOURCE_FILE" value="--replaced from command line"></param>	
	  <param name="COB_YEAR" value="--replaced from command line"></param>

</globals>



<worker1 name="REF_SMC_TMP">
<exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%CSMARTREF_SMARTQ1%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[

--alter table REF_SMC compress move
--/
		
begin
 DBMS_STATS.GATHER_TABLE_STATS(
ownname => user,
tabname => 'REF_SMC',
granularity => 'ALL',
cascade => TRUE,
degree => DBMS_STATS.DEFAULT_DEGREE);
end;
/


	
]]>
      </sql_template>
    </table_utils>
  </exec_select>

 
</worker1>

	
<worker name="SMC_3t">
  <exec_query_spool>
    <table_utils 	method="%QUERY_SPOOL_METHOD%" >
     	<param name="IF_COMPRESSED_SPOOL" value="0"></param>
		<param name="DB_CONNECTOR" value="%DL_GMAC1B%"></param>
		<param name="FROM_DB" value="%DL_GMAC1B%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
      <sql_template>
        <![CDATA[ 
select --+noparallel
ss.SMCP, v.*,substr(reverse(ss.SMCP),1,1) rev from (
select 
nvl(cx.SMCP_CX,x.SMCP_x) smcp_xx, cx.*, x.* from
(SELECT
        /*+ PARALLEL1(CX,2)  INDEX_FFS(CX, PK_DEPOT_XREF  )*/
        SMCP SMCP_CX,
        MAX(
        CASE
          WHEN CX.XREFCODE = 'FII'
          THEN CX.XREFVALUE
          ELSE NULL
        END) AS SMC_SCR_KEY,
        MAX(
        CASE
          WHEN CX.XREFCODE = 'MSDC'
          THEN CX.XREFVALUE
          ELSE NULL
        END) AS SMC_MSD_KEY,
        MAX(
        CASE
          WHEN CX.XREFCODE = 'SCSP'
          THEN CX.XREFVALUE
          ELSE NULL
        END) AS SCR_CUSIP,
        MAX(
        CASE
          WHEN CX.XREFCODE = 'IRIC'
          THEN CX.XREFVALUE
          ELSE NULL
        END) AS IRIC,
        MAX(
        CASE
          WHEN CX.XREFCODE = 'SMBS'
          THEN CX.XREFVALUE
          ELSE NULL
        END) AS MSD_SMBOL --,
		--substr(reverse(smcp),1,1) rev
      FROM C160970SMC.DEPOT_XREF 
      CX
      WHERE XREFCODE IN ( 'FII','MSDC','SCSP','IRIC','SMBS')
	  and smcp in (SELECT
        /*+ PARALLEL1(SLU, 2) INDEX_FFS(SLU,PK_SECURITY_LAST_UPDATE )*/
        smcp
      FROM C160970SMC.SECURITY_LAST_UPDATE   SLU
      WHERE DDAMODIFIEDTS > '07-AUG-12 03.19.13 AM'
      )
      GROUP BY SMCP) cx
      full outer join
      (SELECT
        /*+ PARALLEL1 (X,2) INDEX_FFS(X, PK_XREF )*/
        X.SMCP SMCP_x,
        MAX(
        CASE
          WHEN X.XREFCODE = 'GMIT'
          THEN X.XREFVALUE
          ELSE NULL
        END) AS GMI,
        MAX(
        CASE
          WHEN X.XREFCODE = 'CSP'
          THEN X.XREFVALUE
          ELSE NULL
        END) AS CSP,
        MAX(
        CASE
          WHEN X.XREFCODE = 'ISN'
          THEN X.XREFVALUE
          ELSE NULL
        END) AS ISN,
        MAX(
        CASE
          WHEN X.XREFCODE = 'RIC'
          THEN X.XREFVALUE
          ELSE NULL
        END) AS RIC,
        MAX(
        CASE
          WHEN X.XREFCODE = 'SDL'
          THEN X.XREFVALUE
          ELSE NULL
        END) AS SDL,
        MAX(
        CASE
          WHEN X.XREFCODE = 'CCD'
          THEN X.XREFVALUE
          ELSE NULL
        END) AS CCD,
        MAX(
        CASE
          WHEN X.XREFCODE = 'BBPK'
          THEN X.XREFVALUE
          ELSE NULL
        END) AS BBPK,
        MAX(
        CASE
          WHEN X.XREFCODE = 'BUN'
          THEN X.XREFVALUE
          ELSE NULL
        END) AS BUN,
        MAX(
        CASE
          WHEN X.XREFCODE = 'BCSP'
          THEN X.XREFVALUE
          ELSE NULL
        END) AS BCSP,
        MAX(
        CASE
          WHEN X.XREFCODE = 'BBT'
          THEN X.XREFVALUE
          ELSE NULL
        END) AS BBT,
        MAX(
        CASE
          WHEN X.XREFCODE = 'GRIC'
          THEN X.XREFVALUE
          ELSE NULL
        END) AS GRIC --,
	--	substr(reverse(smcp),1,1) rev
      FROM C160970SMC.XREF   X
      WHERE DFLAG   = 'N'
      AND XREFCODE IN ('BUN','BCSP','BBPK','CCD','SDL','RIC','ISN','CSP','GMIT','BBT','GRIC')
	  and smcp in (SELECT
        /*+ PARALLEL1(SLU, 4) INDEX_FFS(SLU,PK_SECURITY_LAST_UPDATE )*/
        smcp
      FROM C160970SMC.SECURITY_LAST_UPDATE   SLU
      WHERE DDAMODIFIEDTS > '07-AUG-12 03.19.13 AM'
      )
      GROUP BY X.SMCP) X
      on (cx.smcp_cx=x.smcp_x)) v
      full outer join
      (SELECT
        /*+ PARALLEL1(SLU, 4) INDEX_FFS(SLU,PK_SECURITY_LAST_UPDATE )*/
        smcp,DDAMODIFIEDTS
      FROM C160970SMC.SECURITY_LAST_UPDATE   SLU
      --WHERE DDAMODIFIEDTS > '07-AUG-12 03.19.13 AM'
      ) ss
      on (v.smcp_xx=ss.smcp)   
      WHERE DDAMODIFIEDTS > '07-AUG-12 03.19.13 AM'
 ;
]]>
      </sql_template>
    </table_utils>
  </exec_query_spool>
</worker >



</etldataflow>
