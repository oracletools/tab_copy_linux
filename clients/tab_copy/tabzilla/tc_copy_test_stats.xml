<?xml version="1.0" ?>
<etldataflow name="test" pipeline_config="test_config.xml">
  <globals>
	<!-- PIPELINE execution type
		 SYNC - synchronous, ANYNC - asynchronous 
	-->
	  <param name="FLOW_TYPE" value="SYNC"></param>	    
    <param name="FIELD_TERMINATOR" value="|"/>
    <param name="LINE_TERMINATOR" value="~"/>
    <param name="FROM_DB" value="%test_DEV%"/>
    <param name="TO_DB" value="%test_QA%"/>
    <param name="TO_SCHEMA" value="CSMARTREF"/>
    <param name="LAME_DUCK" value="0"/>
    <param name="ARRAYSIZE" value="100000"/>
    <param name="COPYCOMMIT" value="4"/>
	--use these 2 to ensure index maintenance in DIRECT non-parallel mode load mode
    <param name="SKIP_INDEX_MAINTENANCE" value="TRUE"/>
    <param name="DPL_BINDSIZE" value="100000"/>
	--use this to REBUILD unusable indexes.
    <param name="IF_REBUILD_UNUSABLE_INDEXES" value="1"/>
	
  </globals>
  
  
  <worker name="REF_DSMT_SID_COPY_DEMO">
    <exec_copy>
      <sqlp method="%COPY_METHOD%">
        <param name="IGNORE_PARTITION" value="PARTITION_NAME"/>
		<param name="TABLE_NAME" value="REF_DSMT_SID_COPY_DEMO"/>
        <sql_template>
<![CDATA[CSMARTREF.%TABLE_NAME%]]>          
        </sql_template>
        <param name="IF_COMPRESS" value="1"/>
        <param name="IF_GATHER_STATS" value="1"/>
        <param name="SKIP_INDEX_MAINTENANCE" value="FALSE"/>
        <param name="IF_REBUILD_UNUSABLE_INDEXES" value="0"/>
      </sqlp>
    </exec_copy>
  <exec_select>
    <table_utils   method="%DML_METHOD%" >
		<param name="DB_CONNECTOR" value="%test_QA%"></param>
		<param name="SCHEMA_NAME" value="CSMARTREF"></param>
		<param name="TABLE_NAME" value="REF_DSMT_SID_COPY_DEMO"/>
		<param name="STATS_METHOD_OPT" value="FOR ALL COLUMNS"/>
		<param name="STATS_GRANULARITY" value="AUTO"/>
		<param name="STATS_DEGREE" value="16"/>
		<param name="STATS_CASCADE" value="TRUE"/>
      <sql_template>
        <![CDATA[
set serveroutput on echo on termout on

select '%TABLE_NAME% / %STATS_METHOD_OPT% / %STATS_GRANULARITY% / %STATS_CASCADE% / %STATS_DEGREE% ' gather_stats from dual;

begin
 DBMS_STATS.GATHER_TABLE_STATS(
  ownname => user,
  tabname => '%TABLE_NAME%',
  method_opt => '%STATS_METHOD_OPT%',
  granularity => '%STATS_GRANULARITY%',
  cascade => %STATS_CASCADE%,
  degree => %STATS_DEGREE%);
end;
/

set line 300

SELECT   dfo_number, tq_id, server_Type, MIN (num_rows),
               MAX (num_rows), COUNT ( * ) dop
        FROM   v$pq_tqstat
    GROUP BY   dfo_number, tq_id, server_Type
    ORDER BY   dfo_number, tq_id, server_type DESC
/
	
]]>
      </sql_template>
    </table_utils>
  </exec_select>	
  </worker>
  


</etldataflow>